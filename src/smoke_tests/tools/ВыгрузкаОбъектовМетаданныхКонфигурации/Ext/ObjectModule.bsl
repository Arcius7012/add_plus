#Область СлужебныйПрограммныйИнтерфейс

Функция ВыгрузитьКонфигурациюНаСервере() Экспорт
	
	СтруктураКонфигурации = Новый Структура("ИмяКонфигурации, Редакция", Метаданные.Имя, Метаданные.Версия);
	ДеревоКонфигурации = Новый Структура("КонфигурацияПоставщика", СтруктураКонфигурации);
	
	ИменаВидовМетаданных = ПолучитьИменаВидовМетаданных(); 
	ПараметрыОбъектовМетаданных = ПолучитьПараметрыОбъектов();
	ЗависимыеПараметрыОбъектов = ПолучитьЗависимыеПараметрыОбъектов();
	
	Для каждого ИмяМетаданного Из ИменаВидовМетаданных Цикл	
		СоставМетаданного = Новый Массив;
		СтруктураКонфигурации.Вставить(ИмяМетаданного, СоставМетаданного); 
		
		ИменаПараметров = ПараметрыОбъектовМетаданных.Получить(ИмяМетаданного);
		Если ИменаПараметров = Неопределено Тогда
			Если ИмяМетаданного = "Подсистемы" Тогда
				ОбработатьПодсистемы(СоставМетаданного); 
			Иначе
				ОбработатьОбщийВид(СоставМетаданного, ИмяМетаданного);
			КонецЕсли;
		Иначе
		  ОбработатьОбъектМетаданных(СоставМетаданного, ИмяМетаданного, ИменаПараметров, ЗависимыеПараметрыОбъектов);		
		КонецЕсли;
        
	КонецЦикла;
		
	Возврат ЗначениеВСтрокуJSON(ДеревоКонфигурации);

КонецФункции

Функция ВыгрузитьПредопределенныеИменаНаСервере() Экспорт
	
	СтруктураКонфигурации = Новый Структура("ИмяКонфигурации, Редакция", Метаданные.Имя, Метаданные.Версия);
	ДеревоКонфигурации = Новый Структура("ПредопределенныеЭлементыПоставщика", СтруктураКонфигурации);
	МассивИменОбъектовМетаданных = МассивИменОбъектовМетаданных();

	СтруктураОбъектовМетаданных = Новый Структура;
	Для Каждого ЭлементМассива Из МассивИменОбъектовМетаданных Цикл
		СтруктураОбъектовМетаданных.Вставить(ЭлементМассива, Новый Массив);
	КонецЦикла;
	
	Для Каждого ЭлементСтруктурыОбъектовМетаданных Из СтруктураОбъектовМетаданных Цикл 
		ПредопределенныеИмена = Новый Массив;
		Для Каждого ОбъектМетаданных Из Метаданные[ЭлементСтруктурыОбъектовМетаданных.Ключ] Цикл
			СтруктураКонфигурации.Вставить(ЭлементСтруктурыОбъектовМетаданных.Ключ,ПредопределенныеИмена);
			
			ПредопределенныеИменаОбъектов = ОбъектМетаданных.ПолучитьИменаПредопределенных(); 
			
			ПредопределенныеИмена.Добавить(ОбъектМетаданных.Имя);
					
			Для каждого ЭлементПредопределенныхИмен Из ПредопределенныеИменаОбъектов Цикл
			
				ПредопределенныеИмена.Добавить(СтрШаблон("%1.ПредопределенныеДанные.%2",ОбъектМетаданных.Имя,ЭлементПредопределенныхИмен));
			    
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;	                           
	
	Возврат ЗначениеВСтрокуJSON(ДеревоКонфигурации);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьИменаВидовМетаданных()

	МассивИменОбъектов = Новый Массив;
	// Общие
	МассивИменОбъектов.Добавить("Подсистемы");
	МассивИменОбъектов.Добавить("ОбщиеМодули");
	МассивИменОбъектов.Добавить("ПараметрыСеанса");
	МассивИменОбъектов.Добавить("Роли");
	МассивИменОбъектов.Добавить("ОбщиеРеквизиты");
	МассивИменОбъектов.Добавить("ПланыОбмена");
	МассивИменОбъектов.Добавить("КритерииОтбора");
	МассивИменОбъектов.Добавить("ПодпискиНаСобытия");
	МассивИменОбъектов.Добавить("РегламентныеЗадания");
	МассивИменОбъектов.Добавить("ФункциональныеОпции"); 
	МассивИменОбъектов.Добавить("ПараметрыФункциональныхОпций");
	МассивИменОбъектов.Добавить("ОпределяемыеТипы");
	МассивИменОбъектов.Добавить("ХранилищаНастроек");
	МассивИменОбъектов.Добавить("ОбщиеФормы"); 
	МассивИменОбъектов.Добавить("ОбщиеКоманды"); 
	МассивИменОбъектов.Добавить("ГруппыКоманд");
	МассивИменОбъектов.Добавить("Интерфейсы");
	МассивИменОбъектов.Добавить("ОбщиеМакеты");
	МассивИменОбъектов.Добавить("ОбщиеКартинки");
	МассивИменОбъектов.Добавить("ПакетыXDTO");
	МассивИменОбъектов.Добавить("WebСервисы");
	МассивИменОбъектов.Добавить("HTTPСервисы");
	МассивИменОбъектов.Добавить("WSСсылки");
	МассивИменОбъектов.Добавить("ЭлементыСтиля");
	МассивИменОбъектов.Добавить("Стили");
	МассивИменОбъектов.Добавить("Языки");
	
	МассивИменОбъектов.Добавить("Константы");
	МассивИменОбъектов.Добавить("Справочники");
	МассивИменОбъектов.Добавить("Документы");
	МассивИменОбъектов.Добавить("ЖурналыДокументов"); 
	МассивИменОбъектов.Добавить("Перечисления");
	МассивИменОбъектов.Добавить("Отчеты");
	МассивИменОбъектов.Добавить("Обработки");
	МассивИменОбъектов.Добавить("ПланыВидовХарактеристик");
	МассивИменОбъектов.Добавить("ПланыСчетов");
	МассивИменОбъектов.Добавить("ПланыВидовРасчета");
	МассивИменОбъектов.Добавить("РегистрыСведений"); 
	МассивИменОбъектов.Добавить("РегистрыНакопления");
	МассивИменОбъектов.Добавить("РегистрыБухгалтерии");
	МассивИменОбъектов.Добавить("РегистрыРасчета");
	МассивИменОбъектов.Добавить("БизнесПроцессы");
	МассивИменОбъектов.Добавить("Задачи");	
				
	Возврат МассивИменОбъектов;

КонецФункции // ПолучитьИменаВидовМетаданных()

Процедура ОбработатьОбщийВид(Состав,ИмяВида)
		
	Для каждого ОбъектМетаданных Из Метаданные[ИмяВида] Цикл
		Состав.Добавить(ОбъектМетаданных.Имя);		
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьПодсистемы(Состав)

	Для каждого ОбъектМетаданных Из Метаданные.Подсистемы Цикл
		Состав.Добавить(ОбъектМетаданных.Имя);           
		
		РекурсивноДобавитьПодсистемы(Состав, ОбъектМетаданных.Имя, ОбъектМетаданных)		
	КонецЦикла;
	
КонецПроцедуры   

Процедура ОбработатьОбъектМетаданных(Состав, ИмяОбъекта, ИменаПараметров, ЗависимыеПараметры = Неопределено) 
	
	Для каждого ОбъектМетаданных Из Метаданные[ИмяОбъекта] Цикл
		
		Состав.Добавить(ОбъектМетаданных.Имя);
		
		Для каждого ИмяПараметра Из ИменаПараметров Цикл			
			
			ЗависимыйПараметр = ЗависимыеПараметры.Получить(ИмяПараметра);
			ДобавитьОбъектыВСоставМетаданного(Состав, ОбъектМетаданных, ОбъектМетаданных.Имя, ИмяПараметра, ЗависимыйПараметр);  
			
		КонецЦикла;
						
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьОбъектыВСоставМетаданного(Состав, ОбъектМетаданных, ИмяРодителя, ИмяЭлемента, ИмяЗависимогоПараметра = Неопределено)
	Для каждого ЭлементОбъекта Из ОбъектМетаданных[ИмяЭлемента] Цикл 
		СформированноеИмя = СтрШаблон("%1.%2.%3", ИмяРодителя, ИмяЭлемента, ЭлементОбъекта.Имя); 
		Состав.Добавить(СформированноеИмя);   
		
		Если ИмяЗависимогоПараметра <> Неопределено Тогда
			ДобавитьОбъектыВСоставМетаданного(Состав, ЭлементОбъекта, СформированноеИмя, ИмяЗависимогоПараметра); 
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры   

Процедура РекурсивноДобавитьПодсистемы(Состав, ИмяРодителя, Подсистема)

	Для каждого ЭлПодсистем Из Подсистема.Подсистемы Цикл
		ИмяПодсистемы = СтрШаблон("%1.Подсистемы.%2", ИмяРодителя, ЭлПодсистем.Имя);
		Состав.Добавить(ИмяПодсистемы);
		Если ЭлПодсистем.Подсистемы.Количество() > 0 Тогда			
			РекурсивноДобавитьПодсистемы(Состав, ИмяПодсистемы, ЭлПодсистем);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьПараметрыОбъектов()
	
	ЭталонныйНаборПараметров = ПолучитьПараметрыПоУмолчанию();
	ЭталонныйНаборПараметровРегистры = ПолучитьПараметрыПоУмолчаниюРегистра();
	
	ПараметрыОбъекта = Новый Соответствие;      
	
	ИменаПараметров = Новый Массив;	
	ИменаПараметров.Добавить("Формы");
	ИменаПараметров.Добавить("Команды");
	ПараметрыОбъекта.Вставить("КритерииОтбора", ИменаПараметров);

	ИменаПараметров = Новый Массив;		
	ИменаПараметров.Добавить("Операции");
	ПараметрыОбъекта.Вставить("WebСервисы", ИменаПараметров);
	
	ИменаПараметров = Новый Массив;		
	ИменаПараметров.Добавить("Формы");
	ПараметрыОбъекта.Вставить("ХранилищаНастроек", ИменаПараметров);
	
	ИменаПараметров = Новый Массив;		
	ИменаПараметров.Добавить("ЗначенияПеречисления");
	ИменаПараметров.Добавить("Формы");
	ИменаПараметров.Добавить("Макеты");
	ПараметрыОбъекта.Вставить("Перечисления", ИменаПараметров); 
	
	ИменаПараметров = Новый Массив;		
	ИменаПараметров.Добавить("ШаблоныURL");
	ПараметрыОбъекта.Вставить("HTTPСервисы", ИменаПараметров);
	
	ИменаПараметров = Новый Массив;		
	ИменаПараметров.Добавить("Графы");
	ИменаПараметров.Добавить("Формы");
	ИменаПараметров.Добавить("Макеты");
	ИменаПараметров.Добавить("Команды");
	ПараметрыОбъекта.Вставить("ЖурналыДокументов", ИменаПараметров); 
    
	ИменаПараметров = СкопироватьМассив(ЭталонныйНаборПараметров);		
	ИменаПараметров.Добавить("ПризнакиУчета");
	ИменаПараметров.Добавить("ПризнакиУчетаСубконто");
	ПараметрыОбъекта.Вставить("ПланыСчетов", ИменаПараметров); 
	
	ИменаПараметров = СкопироватьМассив(ЭталонныйНаборПараметров);		
	ИменаПараметров.Добавить("РеквизитыАдресации");
	ПараметрыОбъекта.Вставить("Задачи", ИменаПараметров); 
	
	ПараметрыОбъекта.Вставить("ПланыОбмена", ЭталонныйНаборПараметров); 	
	ПараметрыОбъекта.Вставить("Справочники", ЭталонныйНаборПараметров);
	ПараметрыОбъекта.Вставить("Документы", ЭталонныйНаборПараметров); 
	ПараметрыОбъекта.Вставить("Отчеты", ЭталонныйНаборПараметров);         
	ПараметрыОбъекта.Вставить("ПланыВидовРасчета", ЭталонныйНаборПараметров); 
	ПараметрыОбъекта.Вставить("БизнесПроцессы", ЭталонныйНаборПараметров);
	ПараметрыОбъекта.Вставить("Обработки", ЭталонныйНаборПараметров);
	ПараметрыОбъекта.Вставить("ПланыВидовХарактеристик", ЭталонныйНаборПараметров);
	
	ПараметрыОбъекта.Вставить("РегистрыСведений", ЭталонныйНаборПараметровРегистры);
	ПараметрыОбъекта.Вставить("РегистрыНакопления", ЭталонныйНаборПараметровРегистры);
	ПараметрыОбъекта.Вставить("РегистрыБухгалтерии", ЭталонныйНаборПараметровРегистры);
	
	ИменаПараметров = СкопироватьМассив(ЭталонныйНаборПараметровРегистры);		
	ИменаПараметров.Добавить("Перерасчеты");
	ПараметрыОбъекта.Вставить("РегистрыРасчета", ИменаПараметров); 
	
	Возврат ПараметрыОбъекта;
	
КонецФункции  

Функция ПолучитьПараметрыПоУмолчанию()

	ИменаПараметров = Новый Массив;	
	ИменаПараметров.Добавить("Реквизиты");
	ИменаПараметров.Добавить("ТабличныеЧасти"); 
	ИменаПараметров.Добавить("Формы");
	ИменаПараметров.Добавить("Макеты");
	ИменаПараметров.Добавить("Команды");
	
	Возврат ИменаПараметров;
	
КонецФункции

Функция ПолучитьПараметрыПоУмолчаниюРегистра()

	ИменаПараметров = Новый Массив;	
	ИменаПараметров.Добавить("Ресурсы");
	ИменаПараметров.Добавить("Реквизиты");
	ИменаПараметров.Добавить("Измерения");
	ИменаПараметров.Добавить("Формы");
	ИменаПараметров.Добавить("Макеты");
	ИменаПараметров.Добавить("Команды");
	
	Возврат ИменаПараметров;
	
КонецФункции

Функция ПолучитьЗависимыеПараметрыОбъектов()
	
	ЗависимыеПараметры = Новый Соответствие;      
	
	ЗависимыеПараметры.Вставить("ТабличныеЧасти", "Реквизиты");
	ЗависимыеПараметры.Вставить("Операции", "Параметры");
	ЗависимыеПараметры.Вставить("ШаблоныURL", "Методы"); 
	ЗависимыеПараметры.Вставить("Перерасчеты", "Измерения");

	Возврат ЗависимыеПараметры;
	
КонецФункции  

Функция МассивИменОбъектовМетаданных()

	МассивИменОбъектовМетаданных = Новый Массив;
	                                 
	
	МассивИменОбъектовМетаданных.Добавить("Справочники");
	МассивИменОбъектовМетаданных.Добавить("ПланыВидовХарактеристик");
	МассивИменОбъектовМетаданных.Добавить("ПланыСчетов");
	МассивИменОбъектовМетаданных.Добавить("ПланыВидовРасчета");
	
	Возврат МассивИменОбъектовМетаданных;

КонецФункции

Функция ПолучитьПредопределенныеЭлементы(ОбъектМетаданных)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	ЗапросПакета = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	Запрос = ЗапросПакета.Операторы[0];
	
	// Источники
	Запрос.Источники.Добавить(ОбъектМетаданных.ПолноеИмя(), "Таблица");
	
	ДобавитьКолонкуВСхемуЗапросаОбязательно(ЗапросПакета, Запрос, "Ссылка");
	ДобавитьКолонкуВСхемуЗапросаОбязательно(ЗапросПакета, Запрос, "Имя", "ИмяПредопределенныхДанных"); 	
	ДобавитьКолонкуВСхемуЗапросаОбязательно(ЗапросПакета, Запрос, "Наименование");
	ДобавитьКолонкуВСхемуЗапросаОбязательно(ЗапросПакета, Запрос, "ЭтоГруппа");
	ДобавитьКолонкуВСхемуЗапросаОбязательно(ЗапросПакета, Запрос, "ИспользоватьСписок"); 
	ДобавитьКолонкуВСхемуЗапросаОбязательно(ЗапросПакета, Запрос, "Значение");
	
    // Условия	
	Запрос.Отбор.Добавить("Предопределенный");	
	Запрос.Отбор.Добавить("НЕ ЭтоГруппа");	
	
	// Порядок
	ЗапросПакета.Порядок.Добавить("Имя");
	
	ЗапросПредопределенныхЭлементов = Новый Запрос;
	ЗапросПредопределенныхЭлементов.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат ЗапросПредопределенныхЭлементов.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДобавитьКолонкуВСхемуЗапросаОбязательно(ЗапросПакета, Запрос, Псевдоним, Поле = Неопределено, КакПоле = Истина, ЗначениеВыражения = Неопределено)
	
	Если КакПоле Тогда
		
		Если Поле = Неопределено Тогда
			Поле = Псевдоним;
		КонецЕсли;
		
		ИмяПоля = Поле;

		Запрос.ВыбираемыеПоля.Добавить(ИмяПоля);
		ЗапросПакета.Колонки.Найти(ИмяПоля).Псевдоним = Псевдоним;
				
	КонецЕсли;
	
КонецПроцедуры

// Возвращает строку в формате JSON по переданным данным. Значения типа даты преобразовываются в универсальный формат.
//
// Параметры:
//  Значение - Произвольный - значение конвертации в JSON.
//
// Возвращаемое значение:
//  Строка
//
Функция ЗначениеВСтрокуJSON(Значение)
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	
	ЗаписатьJSON(ЗаписьJSON, Значение, НастройкиСериализации);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции 

Функция СкопироватьМассив(Массив)
	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Массив);
	
	Возврат Список.ВыгрузитьЗначения();
	
КонецФункции

#КонецОбласти