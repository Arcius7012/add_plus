#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстЯдра, Утверждения, СтроковыеУтилиты;
&НаКлиенте
Перем ИсключенияИзПроверок, ВыводитьИсключения;
&НаКлиенте
Перем ОтборПоПрефиксу, Префикс, мРолиПрофилей;

#КонецОбласти

#Область ИнтерфейсТестирования

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра 		= КонтекстЯдраПараметр;
	Утверждения 		= КонтекстЯдра.Плагин("БазовыеУтверждения");
	СтроковыеУтилиты 	= КонтекстЯдра.Плагин("СтроковыеУтилиты");
	
	Настройки(КонтекстЯдра, ИмяТеста());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт
	
	Инициализация(КонтекстЯдраПараметр);
	
	Если Не ВыполнятьТест(КонтекстЯдра) Тогда
		НаборТестов.НачатьГруппу("Пропуск теста", Ложь);
		
		ПараметрыТеста = НаборТестов.ПараметрыТеста("Тест пропущен по настройке");
		НаборТестов.Добавить("ПропуститьТест", ПараметрыТеста, "Пропуск теста");
		
		Возврат;
	КонецЕсли;
	
	МассивТестов = ПолучитьИменаРолей(Префикс);
	
	Если МассивТестов.Количество() > 0 Тогда
		НаборТестов.НачатьГруппу("Роли", Ложь);	
	КонецЕсли;
	
	Для каждого Тест Из МассивТестов Цикл 
		ИмяПроцедуры = "ТестДолжен_ПроверитьЧтоРольПринадлежитПрофилю";
		ОписаниеТеста = НСтр("ru = 'Проверка роли на вхождение в профиль доступа'");
		ИмяТеста = КонтекстЯдра.СтрШаблон_("%1 [%2]", Тест.ПолноеИмя, ОписаниеТеста);

		НаборТестов.Добавить(ИмяПроцедуры, НаборТестов.ПараметрыТеста(Тест.Имя, Тест.ПолноеИмя), ИмяТеста);		
	КонецЦикла;
	
			
КонецПроцедуры

#КонецОбласти

#Область РаботаСНастройками

&НаКлиенте
Процедура Настройки(КонтекстЯдра, Знач ПутьНастройки)

	Если ЗначениеЗаполнено(Объект.Настройки) Тогда
		Возврат;
	КонецЕсли;
	
	Префикс = "";
	ОтборПоПрефиксу = Ложь;	
	ВыводитьИсключения = Истина;
	ИсключенияИзПроверок = Новый Соответствие;
	
	ПлагинНастроек 		= КонтекстЯдра.Плагин("Настройки");
	Объект.Настройки 	= ПлагинНастроек.ПолучитьНастройку(ПутьНастройки);
	Настройки 			= Объект.Настройки;
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Объект.Настройки = Новый Структура(ПутьНастройки, Неопределено);
		Возврат;
	КонецЕсли;

	Если Настройки.Свойство("Префикс") Тогда
		Префикс = ВРег(Настройки.Префикс);		
	КонецЕсли;
		
	Если Настройки.Свойство("ОтборПоПрефиксу") Тогда
		ОтборПоПрефиксу = Настройки.ОтборПоПрефиксу;		
	КонецЕсли;
			
	Если Настройки.Свойство("ВыводитьИсключения") Тогда
		ВыводитьИсключения = Настройки.ВыводитьИсключения;
	КонецЕсли;
	
	Если Настройки.Свойство("ИсключенияИзПроверок") Тогда
		ИсключенияИзПроверок(Настройки);
	КонецЕсли;
	
	мРолиПрофилей =  ПолучитьРолиПрофилей();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключенияИзПроверок(Настройки)

	Для Каждого ИсключенияИзПроверокПоОбъектам Из Настройки.ИсключенияИзПроверок Цикл
		
		Если ТипЗнч(ИсключенияИзПроверокПоОбъектам) = Тип("Соответствие") Тогда			
			Для Каждого ИсключениеИзПроверок Из ИсключенияИзПроверокПоОбъектам.Значение Цикл
				ИсключенияИзПроверок.Вставить(ВРег(ИсключенияИзПроверокПоОбъектам.Ключ + "." + ИсключениеИзПроверок), Истина); 	
			КонецЦикла;
		Иначе
			ИсключенияИзПроверок.Вставить(ВРег(ИсключенияИзПроверокПоОбъектам), Истина);
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры

#КонецОбласти

#Область Тесты

&НаКлиенте
Процедура ТестДолжен_ПроверитьЧтоРольПринадлежитПрофилю(ИмяРоли, ПолноеИмяРоли) Экспорт
		
	ПропускатьТест = ПропускатьТест(ИмяРоли, ПолноеИмяРоли);
	
	Результат = ПроверитьРольПринадлежитПрофилю(ИмяРоли, мРолиПрофилей);
	Если Не Результат И ПропускатьТест.Пропустить Тогда
		Утверждения.ПропуститьТест(ТекстСообщения(ИмяРоли));
	Иначе
		Утверждения.Проверить(Результат, ТекстСообщения(ИмяРоли));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьРольПринадлежитПрофилю(ИмяРоли, РолиПрофилей)
	
	Результат = Истина;
	КоличествоПрофилей = РолиПрофилей.Получить(ИмяРоли);
	Если КоличествоПрофилей = Неопределено Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПропуститьТест(Знач ПричинаПропускаТеста) Экспорт
	КонтекстЯдра.ПропуститьТест(ПричинаПропускаТеста);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПропускатьТест(ИмяРоли, ПолноеИмяРоли)

	Результат = Новый Структура;
	Результат.Вставить("ТекстСообщения", "");
	Результат.Вставить("Пропустить", Ложь);
	
	Если ИсключенИзПроверок(ВРег(ПолноеИмяРоли)) Тогда
		ШаблонСообщения = НСтр("ru = 'Роль ""%1"" исключен из проверки'");
		Результат.ТекстСообщения = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяРоли);
		Результат.Пропустить = Истина;
		Возврат Результат;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Функция ИсключенИзПроверок(ПолноеИмяМетаданных)
	
	Результат = Ложь;
	МассивСтрокИмени = СтроковыеУтилиты.РазложитьСтрокуВМассивПодстрок(ПолноеИмяМетаданных, ".");
	ИсключениеВсехОбъектов = СтроковыеУтилиты.ПодставитьПараметрыВСтроку("%1.*", МассивСтрокИмени[0]);
	
	Если ИсключенияИзПроверок.Получить(ВРег(ПолноеИмяМетаданных)) <> Неопределено
	 Или ИсключенияИзПроверок.Получить(ВРег(ИсключениеВсехОбъектов)) <> Неопределено Тогда
		Результат = Истина;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция УбратьИсключения(МассивТестов)

	Результат = Новый Массив;
	
	Для Каждого Тест Из МассивТестов Цикл
		Если Не ИсключенИзПроверок(Тест.ПолноеИмя) Тогда
			Результат.Добавить(Тест);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ТекстСообщения(ИмяРоли)

	ШаблонСообщения = НСтр("ru = 'Роль: %1 не включена ни в один активный профиль.'");
	ТекстСообщения = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяРоли);
	
	Возврат ТекстСообщения;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяСодержитПрефикс(Имя, Префикс)
	
	Если Не ЗначениеЗаполнено(Префикс) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДлинаПрефикса = СтрДлина(Префикс);
	Возврат СтрНайти(ВРег(Прав(Имя, ДлинаПрефикса)), Префикс) > 0;
	
КонецФункции

&НаСервере
Функция ИмяТеста()
	
	Если Не ЗначениеЗаполнено(Объект.ИмяТеста) Тогда
		Объект.ИмяТеста = РеквизитФормыВЗначение("Объект").Метаданные().Имя;
	КонецЕсли;
	
	Возврат Объект.ИмяТеста;
	
КонецФункции

&НаКлиенте
Функция ВыполнятьТест(КонтекстЯдра)
	
	ВыполнятьТест = Ложь;
	Настройки = Объект.Настройки;
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Возврат ВыполнятьТест;
	КонецЕсли;
		
	Если ТипЗнч(Настройки) = Тип("Структура") 
		И Настройки.Свойство("Используется") Тогда
		
		ВыполнятьТест = Настройки.Используется;	
	КонецЕсли;
	
	Возврат ВыполнятьТест;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРолиПрофилей()
    РолиПрофилей = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрофилиГруппДоступаРоли.Роль КАК Роль,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПрофилиГруппДоступаРоли.Ссылка) КАК КоличествоПрофилей
		|ИЗ
		|	Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
		|		ПО ПрофилиГруппДоступаРоли.Ссылка = ПрофилиГруппДоступа.Ссылка
		|ГДЕ
		|	НЕ ПрофилиГруппДоступа.ПометкаУдаления
		|	И НЕ ПрофилиГруппДоступа.ЭтоГруппа
		|
		|СГРУППИРОВАТЬ ПО
		|	ПрофилиГруппДоступаРоли.Роль
		|
		|УПОРЯДОЧИТЬ ПО
		|	Роль";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РолиПрофилей.Вставить(ВыборкаДетальныеЗаписи.Роль.Имя, ВыборкаДетальныеЗаписи.КоличествоПрофилей);
	КонецЦикла;
	
	Возврат РолиПрофилей

КонецФункции // ПолучитьРолиСПрофилями()

&НаСервереБезКонтекста
Функция ПолучитьИменаРолей(Префикс)

	ИменаРолей = Новый Массив;
	
	Для каждого ОбъектРоль Из Метаданные.Роли Цикл
		Если СтрНачинаетсяС(НРег(ОбъектРоль.Имя), НРег(Префикс)) Тогда				
			СтруктураРоли = Новый Структура;
			СтруктураРоли.Вставить("Имя", ОбъектРоль.Имя);
			СтруктураРоли.Вставить("ПолноеИмя", ОбъектРоль.ПолноеИмя());
		
			ИменаРолей.Добавить(СтруктураРоли);
		КонецЕсли;
	КонецЦикла;
			
	Возврат ИменаРолей;

КонецФункции // ПолучитьРоли()

#КонецОбласти