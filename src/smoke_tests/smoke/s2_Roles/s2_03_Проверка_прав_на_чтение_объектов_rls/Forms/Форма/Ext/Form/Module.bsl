#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Утверждения;
&НаКлиенте
Перем СтроковыеУтилиты;
&НаКлиенте
Перем ИсключенияИзПроверок;
&НаКлиенте
Перем ВыводитьИсключения;
&НаКлиенте
Перем Настройки, Префикс; // add_plus 
&НаКлиенте
Перем ПроверяемыеРоли; 
#КонецОбласти

#Область ИнтерфейсТестирования

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	СтроковыеУтилиты = КонтекстЯдра.Плагин("СтроковыеУтилиты");
	
	Настройки(КонтекстЯдра, ИмяТеста());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт
	
	Инициализация(КонтекстЯдраПараметр);
	
	Если Не ВыполнятьТест(КонтекстЯдра) Тогда
		НаборТестов.НачатьГруппу("Пропуск теста", Ложь);
		
		ПараметрыТеста = НаборТестов.ПараметрыТеста("Тест пропущен по настройке");
		НаборТестов.Добавить("ПропуститьТест", ПараметрыТеста, "Пропуск теста");
		
		Возврат;
	КонецЕсли; 
	
	Если Префикс = "" Тогда
		НаборТестов.НачатьГруппу("Пропуск теста", Ложь);
		
		ПараметрыТеста = НаборТестов.ПараметрыТеста("Не задан префикс ролей");
		НаборТестов.Добавить("ПропуститьТест", ПараметрыТеста, "Пропуск теста");
		
		Возврат;	
	КонецЕсли;
	
	ОбъектыМетаданных = ОбъектыМетаданных(Настройки);
	ПроверяемыеРоли = ПолучитьПроверяемыеРоли(Префикс);
	
	Если Не ЗначениеЗаполнено(ОбъектыМетаданных) Тогда
		НаборТестов.НачатьГруппу("Пропуск теста", Ложь);
		
		ПараметрыТеста = НаборТестов.ПараметрыТеста("Отсутствуют тестовые данные");
		НаборТестов.Добавить("ПропуститьТест", ПараметрыТеста, "Пропуск теста");
		
		Возврат;
	КонецЕсли;
	
	ЕстьТесты = Ложь;
	
	Для Каждого КоллекцияОбъектовМетаданных Из ОбъектыМетаданных Цикл
		
		Если Не ВыводитьИсключения Тогда
			МассивТестов = УбратьИсключения(КоллекцияОбъектовМетаданных.Значение);
		Иначе
			МассивТестов = КоллекцияОбъектовМетаданных.Значение;
		КонецЕсли;
		
		Если МассивТестов.Количество() Тогда
			НаборТестов.НачатьГруппу(КоллекцияОбъектовМетаданных.Ключ, Истина);
		КонецЕсли;
		Для Каждого Тест Из МассивТестов Цикл
			НаборТестов.Добавить(Тест.ИмяПроцедуры, НаборТестов.ПараметрыТеста(Тест.ПолноеИмя, ПроверяемыеРоли), Тест.ИмяТеста);
			ЕстьТесты = Истина;
		КонецЦикла;
		
	КонецЦикла;	
	
	Если Не ЕстьТесты Тогда
		НаборТестов.НачатьГруппу("Пропуск теста", Ложь);
		
		ПараметрыТеста = НаборТестов.ПараметрыТеста("Отсутствуют тестовые данные для РЛС");
		НаборТестов.Добавить("ПропуститьТест", ПараметрыТеста, "Пропуск теста");	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСНастройками

&НаКлиенте
Процедура Настройки(КонтекстЯдра, Знач ПутьНастройки)

	Если ЗначениеЗаполнено(Объект.Настройки) Тогда
		Возврат;
	КонецЕсли;
	
	ИсключенияИзПроверок = Новый Соответствие;
	ВыводитьИсключения = Истина;
	ПлагинНастроек = КонтекстЯдра.Плагин("Настройки");
	Объект.Настройки = ПлагинНастроек.ПолучитьНастройку(ПутьНастройки);
	Настройки = Объект.Настройки;
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Объект.Настройки = Новый Структура(ПутьНастройки, Неопределено);
		Возврат;
	КонецЕсли;
	
	// add_plus
	Префикс = "";
	Если Настройки.Свойство("Префикс") Тогда
		Префикс = Настройки.Префикс;
	КонецЕсли;
	// add_plus
	
	Если Настройки.Свойство("ВыводитьИсключения") Тогда
		ВыводитьИсключения = Настройки.ВыводитьИсключения;
	КонецЕсли;
	
	Если Настройки.Свойство("ИсключенияИзпроверок") Тогда
		ИсключенияИзПроверок(Настройки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ОбъектыМетаданных(Настройки)
	
	ОбъектыМетаданных = Новый Структура;
	Пояснение = НСтр("ru = 'Проверка прав на чтение объекта с RLS'");
	
	ОбъектыМетаданных = ИнициироватьДоступныеОбъектыМетаданных();
	
	Для Каждого КоллекцияОбъектовМетаданных Из ОбъектыМетаданных Цикл		
		
		МассивОбъектовМетаданных = Новый Массив;
		Для Каждого ЭлементКоллекцииОбъектовМетаданных Из КоллекцияОбъектовМетаданных.Значение Цикл
			ПолноеИмя = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(
			"%1.%2", 
			КоллекцияОбъектовМетаданных.Ключ, 
			ЭлементКоллекцииОбъектовМетаданных);
			ИмяТеста = СтроковыеУтилиты.ПодставитьПараметрыВСтроку("%1 [%2]",ПолноеИмя, Пояснение);								
			СтруктураТеста = Новый Структура; 
			СтруктураТеста.Вставить("ПолноеИмя", ПолноеИмя);				
			СтруктураТеста.Вставить("ИмяТеста", ИмяТеста);
			СтруктураТеста.Вставить("ИмяПроцедуры", "ТестДолжен_ПроверитьЧтоЕстьПраваНаЧтениеRLS");
			МассивОбъектовМетаданных.Добавить(СтруктураТеста);
		КонецЦикла;		
		
		ОбъектыМетаданных.Вставить(КоллекцияОбъектовМетаданных.Ключ, МассивОбъектовМетаданных);
		
	КонецЦикла;
	
	возврат ОбъектыМетаданных;
	
КонецФункции

&НаКлиенте
Процедура ИсключенияИзПроверок(Настройки)

	Для Каждого ИсключенияИзПроверокПоОбъектам Из Настройки.ИсключенияИзпроверок Цикл
		Для Каждого ИсключениеИзПроверок Из ИсключенияИзПроверокПоОбъектам.Значение Цикл
			ИсключенияИзПроверок.Вставить(ВРег(ИсключенияИзПроверокПоОбъектам.Ключ + "." + ИсключениеИзПроверок), Истина); 	
		КонецЦикла;
	КонецЦикла;	

КонецПроцедуры

#КонецОбласти

#Область Тесты

&НаКлиенте
Процедура ТестДолжен_ПроверитьЧтоЕстьПраваНаЧтениеRLS(ПолноеИмяМетаданных, ПроверяемыеРоли) Экспорт
	
	ПропускатьТест = ПропускатьТест(ПолноеИмяМетаданных);
	Право = "Чтение";
	
	Результат = ПроверитьЧтоЕстьПраваНаЧтениеRLS(ПолноеИмяМетаданных, Право, ИсключенияИзПроверок, ПроверяемыеРоли);
	
	Если Результат <> "" И ПропускатьТест.Пропустить Тогда
		Утверждения.ПропуститьТест(ТекстСообщения(ПолноеИмяМетаданных, Право, Результат));
	Иначе
		Утверждения.Проверить(Результат = "", ТекстСообщения(ПолноеИмяМетаданных, Право, Результат));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьЧтоЕстьПраваНаЧтениеRLS(ПолноеИмяМетаданных, Право, ИсключенияИзПроверок, Знач ПроверяемыеРоли)

	СтроковыеУтилиты = СтроковыеУтилиты();
	Результат = "";
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных);
	Если ОбъектМетаданных = Неопределено Тогда
		ШаблонОшибки = НСтр("ru = 'Объект ""%1"" не найден.'");
		Результат = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(ШаблонОшибки, ПолноеИмяМетаданных);
		Возврат Результат;
	КонецЕсли;
			
	СписокПолей = ВсеПоляОграниченияДоступаОбъектаМетаданных(ОбъектМетаданных, ПолноеИмяМетаданных);
	
	Для Каждого ИмяРоли Из ПроверяемыеРоли Цикл
		Роль = 	Метаданные.Роли[ИмяРоли];
		Если ИсключенияИзПроверок.Получить(ВРег(Роль.ПолноеИмя())) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
				
		Если Метаданные.ОсновныеРоли.Содержит(Роль) Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьПраво = ПравоДоступа(Право, ОбъектМетаданных, Роль);
		ЕстьRLS = ПараметрыДоступа(Право, ОбъектМетаданных, СписокПолей, Роль).ОграничениеУсловием;
		
		Если ЕстьПраво И Не ЕстьRLS Тогда
			Разделитель = ?(ЗначениеЗаполнено(Результат), Символы.ПС, "");
			Результат = СтроковыеУтилиты.ПодставитьПараметрыВСтроку("%1%2%3", Результат, Разделитель, Роль.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПропуститьТест(Знач ПричинаПропускаТеста) Экспорт
	КонтекстЯдра.ПропуститьТест(ПричинаПропускаТеста);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
 
&НаСервереБезКонтекста
Функция ИнициироватьДоступныеОбъектыМетаданных()  
	
	Ответ = Новый Соответствие;
	
	НужныеТипы = Новый Массив; 
	
	// add_plus
	ТипОрганизация = "";
	Если Метаданные.Справочники.Найти("Организации") <> Неопределено Тогда
		НужныеТипы.Добавить(Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТипОрганизация = "Организации";
	ИначеЕсли Метаданные.Справочники.Найти("_ДемоОрганизации") <> Неопределено Тогда 
		НужныеТипы.Добавить(Новый ОписаниеТипов("СправочникСсылка._ДемоОрганизации"));
		ТипОрганизация = "_ДемоОрганизации";
	Иначе
		Возврат Ответ;
	КонецЕсли;	
	// add_plus
			
	ПолученныеЗначения = ОбойтиМетаданные(Метаданные.Документы, НужныеТипы);
		
	Если ПолученныеЗначения.Количество() > 0 Тогда
		Ответ.Вставить("Документ", ПолученныеЗначения);
	КонецЕсли;
		
	ПолученныеЗначения = ОбойтиМетаданные(Метаданные.Справочники, НужныеТипы);
	ПолученныеЗначения.Добавить(ТипОрганизация); // add_plus
	
	Если ПолученныеЗначения.Количество() > 0 Тогда
		Ответ.Вставить("Справочник", ПолученныеЗначения);
	КонецЕсли;	
	
	ПолученныеЗначения = ОбойтиМетаданные(Метаданные.РегистрыСведений, НужныеТипы, Истина);
	
	Если ПолученныеЗначения.Количество() > 0 Тогда
		Ответ.Вставить("РегистрСведений", ПолученныеЗначения);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбойтиМетаданные(КоллекцияМетаданных, НужныеТипы, Регистр = Ложь)
	
	Ответ = Новый Массив;
	Для Каждого ОбъетМД Из КоллекцияМетаданных Цикл
		 
		Если Регистр Тогда
			ЕстьПопадание = НайтиТип(ОбъетМД.Измерения, НужныеТипы);
			
			// Пока не надо
			//Если Не ЕстьПопадание Тогда
			//	ЕстьПопадание = НайтиТип(ОбъетМД.Ресурсы, НужныеТипы);	
			//КонецЕсли;
			//
			//Если Не ЕстьПопадание Тогда
			//	ЕстьПопадание = НайтиТип(ОбъетМД.Реквизиты, НужныеТипы);	
			//КонецЕсли;			
		Иначе
			ЕстьПопадание = НайтиТип(ОбъетМД.Реквизиты, НужныеТипы);
			
			Если Не ЕстьПопадание Тогда
				
				Для Каждого ТЧ Из ОбъетМД.ТабличныеЧасти Цикл
					ЕстьПопадание = НайтиТип(ТЧ.Реквизиты, НужныеТипы);
					
					Если ЕстьПопадание Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;			
			КонецЕсли;			
		КонецЕсли;
		
		Если ЕстьПопадание Тогда
			Ответ.Добавить(ОбъетМД.Имя);			
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции 

&НаСервереБезКонтекста
Функция НайтиТип(КоллекцияРеквизитов, Типы)
	
	Для Каждого Реквизит Из КоллекцияРеквизитов Цикл
		Если Типы.Найти(Реквизит.Тип) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции 

&НаКлиенте
Функция ПропускатьТест(ПолноеИмяМетаданных)

	Результат = Новый Структура;
	Результат.Вставить("ТекстСообщения", "");
	Результат.Вставить("Пропустить", Ложь);
	
	Если ИсключенИзПроверок(ВРег(ПолноеИмяМетаданных)) Тогда
		ШаблонСообщения = НСтр("ru = 'Объект ""%1"" исключен из проверки'");
		Результат.ТекстСообщения = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПолноеИмяМетаданных);
		Результат.Пропустить = Истина;
		Возврат Результат;
	КонецЕсли;
		
	Возврат Результат;

КонецФункции 

&НаКлиенте
Функция ИсключенИзПроверок(ПолноеИмяМетаданных)
	
	Результат = Ложь;
	МассивСтрокИмени = СтроковыеУтилиты.РазложитьСтрокуВМассивПодстрок(ПолноеИмяМетаданных, ".");
	ИслючениеВсехОбъектов = СтроковыеУтилиты.ПодставитьПараметрыВСтроку("%1.*", МассивСтрокИмени[0]);
	
	Если ИсключенияИзПроверок.Получить(ВРег(ПолноеИмяМетаданных)) <> Неопределено
	 Или ИсключенияИзПроверок.Получить(ВРег(ИслючениеВсехОбъектов)) <> Неопределено Тогда
		Результат = Истина;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция УбратьИсключения(МассивТестов)

	Результат = Новый Массив;
	
	Для Каждого Тест Из МассивТестов Цикл
		Если Не ИсключенИзПроверок(Тест.ПолноеИмя) Тогда
			Результат.Добавить(Тест);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ТекстСообщения(ПолноеИмяМетаданных, Право, Результат)

	ШаблонСообщения = НСтр("ru = 'Есть роли с правом ""%1"" без RLS на объект ""%2"":%3%4'");
	ТекстСообщения = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(
						ШаблонСообщения, 
						Право, 
						ПолноеИмяМетаданных, 
						Символы.ПС, 
						Результат);
	
	Возврат ТекстСообщения;

КонецФункции

&НаСервереБезКонтекста
Функция КоллекцияМетаданныхДоступнаДляПроверки(ИмяКоллекции)
	
	КоллекцииОбъектовМетаданных = Новый Массив;
		
	КоллекцииОбъектовМетаданных.Добавить("Документ");
	КоллекцииОбъектовМетаданных.Добавить("Справочник");
	КоллекцииОбъектовМетаданных.Добавить("РегистрСведений");
		
	Возврат КоллекцииОбъектовМетаданных.Найти(ИмяКоллекции);

КонецФункции

&НаСервереБезКонтекста
Функция ВсеОбъектыКоллекцииМетаданных(ИмяКоллекции, Пояснение)
	
	Результат = Новый Массив;
	СтроковыеУтилиты = СтроковыеУтилиты();
	
	СоответствиеОбъектовМетаданных = Новый Соответствие;
	СоответствиеОбъектовМетаданных.Вставить("ПланОбмена", "ПланыОбмена");
	СоответствиеОбъектовМетаданных.Вставить("Константа", "Константы");
	СоответствиеОбъектовМетаданных.Вставить("Документ", "Документы");
	СоответствиеОбъектовМетаданных.Вставить("Справочник", "Справочники");
	СоответствиеОбъектовМетаданных.Вставить("ЖурналДокументов", "ЖурналыДокументов");
	СоответствиеОбъектовМетаданных.Вставить("Последовательность", "Последовательности");
	СоответствиеОбъектовМетаданных.Вставить("ПланВидовХарактеристик", "ПланыВидовХарактеристик");
	СоответствиеОбъектовМетаданных.Вставить("ПланСчетов", "ПланыСчетов");
	СоответствиеОбъектовМетаданных.Вставить("ПланВидовРасчета", "ПланыВидовРасчета");
	СоответствиеОбъектовМетаданных.Вставить("РегистрСведений", "РегистрыСведений");
	СоответствиеОбъектовМетаданных.Вставить("РегистрНакопления", "РегистрыНакопления");
	СоответствиеОбъектовМетаданных.Вставить("РегистрБухгалтерии", "РегистрыБухгалтерии");
	СоответствиеОбъектовМетаданных.Вставить("РегистрРасчета", "РегистрыРасчета");
	СоответствиеОбъектовМетаданных.Вставить("БизнесПроцесс", "БизнесПроцессы");
	СоответствиеОбъектовМетаданных.Вставить("Задача", "Задачы");
	
	Для Каждого ОбъектМетаданных Из Метаданные[СоответствиеОбъектовМетаданных.Получить(ИмяКоллекции)] Цикл
		
		ИмяТеста = СтроковыеУтилиты.ПодставитьПараметрыВСтроку("%1 [%2]", ОбъектМетаданных.ПолноеИмя(), Пояснение);
		
		СтруктураТеста = Новый Структура;
		СтруктураТеста.Вставить("ПолноеИмя", ОбъектМетаданных.ПолноеИмя());
		СтруктураТеста.Вставить("ИмяТеста", ИмяТеста);
		СтруктураТеста.Вставить("ИмяПроцедуры", "ТестДолжен_ПроверитьЧтоЕстьПраваНаЧтениеRLS");
		
		Результат.Добавить(СтруктураТеста);
	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВсеПоляОграниченияДоступаОбъектаМетаданных(ОбъектМетаданных,
              									   ПолноеИмя,
                                                   ОбъектИБ = Неопределено,
                                                   ПолучитьМассивИмен = Ложь)
	
	ИмяТипа = Лев(ПолноеИмя, СтрНайти(ПолноеИмя, ".") - 1);
	ИменаКоллекций = ИменаКоллекций(ИмяТипа);
		
	ИменаПолей = Новый Массив;
	Если ОбъектИБ = Неопределено Тогда
		ТипХранилищеЗначения = Тип("ХранилищеЗначения");
	Иначе
		ТипХранилищеЗначения = ОбъектИБ.NewObject("ОписаниеТипов", "ХранилищеЗначения").Типы().Получить(0);
	КонецЕсли;

	Для Каждого ИмяКоллекции Из ИменаКоллекций Цикл
		Если ИмяКоллекции = "ТабличныеЧасти"
		 ИЛИ ИмяКоллекции = "СтандартныеТабличныеЧасти" Тогда
			Для Каждого ТабличнаяЧасть Из ОбъектМетаданных[ИмяКоллекции] Цикл
				ДобавитьПолеОграниченияДоступаОбъектаМетаданных(ОбъектМетаданных, ТабличнаяЧасть.Имя, ИменаПолей, ОбъектИБ);
				ОбработатьРеквизитыТабличнойЧасти(
					ТипХранилищеЗначения, 
					ОбъектМетаданных, 
					ТабличнаяЧасть, 
					ИмяКоллекции, 
					ИменаПолей, 
					ОбъектИБ);
			КонецЦикла;
		Иначе
			ОбработатьПоляОбъектаМетаданных(
				ИмяТипа, 
				ОбъектМетаданных, 
				ИмяКоллекции, 
				ТипХранилищеЗначения, 
				ИменаПолей, 
				ОбъектИБ);
		КонецЕсли;
	КонецЦикла;
	
	Если ПолучитьМассивИмен Тогда
		Возврат ИменаПолей;
	КонецЕсли;
	
	СписокПолей = "";
	Для Каждого ИмяПоля Из ИменаПолей Цикл
		СписокПолей = СписокПолей + ", " + ИмяПоля;
	КонецЦикла;
	
	Возврат Сред(СписокПолей, 3);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбработатьРеквизитыТабличнойЧасти(ТипХранилищеЗначения, 
											ОбъектМетаданных, 
											ТабличнаяЧасть, 
											ИмяКоллекции, 
											ИменаПолей, 
											ОбъектИБ)

	Реквизиты = ?(ИмяКоллекции = "ТабличныеЧасти", ТабличнаяЧасть.Реквизиты, ТабличнаяЧасть.СтандартныеРеквизиты);
	
	Для Каждого Поле Из Реквизиты Цикл
		Если Поле.Тип.СодержитТип(ТипХранилищеЗначения) Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьПолеОграниченияДоступаОбъектаМетаданных(
			ОбъектМетаданных, 
			ТабличнаяЧасть.Имя + "." + Поле.Имя, 
			ИменаПолей, 
			ОбъектИБ);
	КонецЦикла;
	Если ИмяКоллекции = "СтандартныеТабличныеЧасти" И ТабличнаяЧасть.Имя = "ВидыСубконто" Тогда
		Для Каждого Поле Из ОбъектМетаданных.ПризнакиУчетаСубконто Цикл
			ДобавитьПолеОграниченияДоступаОбъектаМетаданных(
				ОбъектМетаданных, 
				"ВидыСубконто." + Поле.Имя, 
				ИменаПолей, 
				ОбъектИБ);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьПоляОбъектаМетаданных(ИмяТипа, 
										  ОбъектМетаданных, 
										  ИмяКоллекции, 
										  ТипХранилищеЗначения, 
										  ИменаПолей, 
										  ОбъектИБ)

	Для Каждого Поле Из ОбъектМетаданных[ИмяКоллекции] Цикл
		Если ПропускатьПоле(ИмяТипа, Поле, ИмяКоллекции) Тогда
			Продолжить;
		КонецЕсли;
		Если ИмяКоллекции = "Графы"
		 Или Поле.Тип.СодержитТип(ТипХранилищеЗначения) Тогда
			Продолжить;
		КонецЕсли;
		Если ЭтоБалансовоеПоле(Поле, ИмяКоллекции, ОбъектИБ, Метаданные, ОбъектМетаданных) Тогда
			// Дт
			ДобавитьПолеОграниченияДоступаОбъектаМетаданных(ОбъектМетаданных, Поле.Имя + "Дт", ИменаПолей, ОбъектИБ);
			// Кт
			ДобавитьПолеОграниченияДоступаОбъектаМетаданных(ОбъектМетаданных, Поле.Имя + "Кт", ИменаПолей, ОбъектИБ);
		Иначе
			ДобавитьПолеОграниченияДоступаОбъектаМетаданных(ОбъектМетаданных, Поле.Имя, ИменаПолей, ОбъектИБ);
		КонецЕсли;
	КонецЦикла;   

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИменаКоллекций(ИмяТипа)

	ИменаТипов = Новый Массив;
	ИменаТипов.Добавить("Справочник");
	ИменаТипов.Добавить("Документ");
	ИменаТипов.Добавить("ПланВидовХарактеристик");
	ИменаТипов.Добавить("БизнесПроцесс");
	
	ИменаТиповРегистров = Новый Массив;
	ИменаТиповРегистров.Добавить("РегистрСведений");
	ИменаТиповРегистров.Добавить("РегистрНакопления");
	ИменаТиповРегистров.Добавить("РегистрБухгалтерии");
	ИменаТиповРегистров.Добавить("РегистрРасчета");
		
	ИменаКоллекций = Новый Массив;
		
	Если ИменаТипов.Найти(ИмяТипа) <> Неопределено Тогда
		ИменаКоллекций.Добавить("Реквизиты");
		ИменаКоллекций.Добавить("ТабличныеЧасти");
		ИменаКоллекций.Добавить("СтандартныеРеквизиты");		
	ИначеЕсли ИмяТипа = "ЖурналДокументов" Тогда
		ИменаКоллекций.Добавить("Графы");
		ИменаКоллекций.Добавить("СтандартныеРеквизиты");		
	ИначеЕсли ИмяТипа = "ПланСчетов" Тогда
		ИменаКоллекций.Добавить("Реквизиты");
		ИменаКоллекций.Добавить("ТабличныеЧасти");
		ИменаКоллекций.Добавить("ПризнакиУчета");
		ИменаКоллекций.Добавить("СтандартныеРеквизиты");
		ИменаКоллекций.Добавить("СтандартныеТабличныеЧасти");	
	ИначеЕсли ИмяТипа = "ПланВидовРасчета" Тогда
		ИменаКоллекций.Добавить("Реквизиты");
		ИменаКоллекций.Добавить("ТабличныеЧасти");
		ИменаКоллекций.Добавить("СтандартныеРеквизиты");
		ИменаКоллекций.Добавить("СтандартныеТабличныеЧасти");		
	ИначеЕсли ИменаТиповРегистров.Найти(ИмяТипа) <> Неопределено Тогда
		ИменаКоллекций.Добавить("Измерения");
		ИменаКоллекций.Добавить("Ресурсы");
		ИменаКоллекций.Добавить("Реквизиты");
		ИменаКоллекций.Добавить("СтандартныеРеквизиты");		
	ИначеЕсли ИмяТипа = "Задача" Тогда
		ИменаКоллекций.Добавить("РеквизитыАдресации");
		ИменаКоллекций.Добавить("Реквизиты");
		ИменаКоллекций.Добавить("ТабличныеЧасти");
		ИменаКоллекций.Добавить("СтандартныеРеквизиты");		
	Иначе
		ИменаКоллекций.Добавить("");
	КонецЕсли;
	
	Возврат ИменаКоллекций;

КонецФункции

&НаСервереБезКонтекста
Функция ПропускатьПоле(ИмяТипа, Поле, ИмяКоллекции)

	Возврат ИмяТипа = "ЖурналДокументов"       И Поле.Имя = "Тип"
		ИЛИ ИмяТипа = "ПланВидовХарактеристик" И Поле.Имя = "ТипЗначения"
		ИЛИ ИмяТипа = "ПланСчетов"             И Поле.Имя = "Вид"
		ИЛИ ИмяТипа = "РегистрНакопления"      И Поле.Имя = "ВидДвижения"
		ИЛИ ИмяТипа = "РегистрБухгалтерии"     И ИмяКоллекции = "СтандартныеРеквизиты" И СтрНайти(Поле.Имя, "Субконто") > 0;

КонецФункции 
	
&НаСервереБезКонтекста
Функция ЭтоБалансовоеПоле(Поле, ИмяКоллекции, ОбъектИБ, Метаданные, ОбъектМетаданных)

	мОбъектМетаданных = ?(ОбъектИБ = Неопределено, Метаданные, ОбъектИБ.Метаданные);
	ЭтоРегистраБухгалтерии = мОбъектМетаданных.РегистрыБухгалтерии.Содержит(ОбъектМетаданных);
	
	Возврат (ИмяКоллекции = "Измерения" ИЛИ ИмяКоллекции = "Ресурсы") И ЭтоРегистраБухгалтерии И НЕ Поле.Балансовый;
		
КонецФункции
			   
&НаСервереБезКонтекста
Процедура ДобавитьПолеОграниченияДоступаОбъектаМетаданных(ОбъектМетаданных,
                                                          ИмяПоля,
                                                          ИменаПолей,
                                                          ОбъектИБ)
	
	Попытка
		Если ОбъектИБ = Неопределено Тогда
			ПараметрыДоступа("Чтение", ОбъектМетаданных, ИмяПоля, Метаданные.Роли.ПолныеПрава);
		Иначе
			ОбъектИБ.ПараметрыДоступа(
				"Чтение",
				ОбъектМетаданных,
				ИмяПоля,
				ОбъектИБ.Метаданные.Роли.ПолныеПрава);
		КонецЕсли;
		ПараметрыДоступаМожноПолучить = Истина;
	Исключение
		ПараметрыДоступаМожноПолучить = Ложь;
	КонецПопытки;
	
	Если ПараметрыДоступаМожноПолучить Тогда
		ИменаПолей.Добавить(ИмяПоля);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтроковыеУтилиты()
	Возврат ВнешниеОбработки.Создать("СтроковыеУтилиты");	
КонецФункции 

&НаКлиенте
Функция ИмяТеста()
	
	Если Не ЗначениеЗаполнено(Объект.ИмяТеста) Тогда
		Объект.ИмяТеста = ИмяТестаНаСервере();
	КонецЕсли;
	
	Возврат Объект.ИмяТеста;
	
КонецФункции

&НаСервере
Функция ИмяТестаНаСервере()
	Возврат РеквизитФормыВЗначение("Объект").Метаданные().Имя;
КонецФункции

&НаКлиенте
Функция ВыполнятьТест(КонтекстЯдра)
	
	ВыполнятьТест = Ложь;
	ПутьНастройки = ИмяТеста();
	Настройки(КонтекстЯдра, ПутьНастройки);
	Настройки = Объект.Настройки;
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Возврат ВыполнятьТест;
	КонецЕсли;
		
	Если ТипЗнч(Настройки) = Тип("Структура") И Настройки.Свойство("Используется") Тогда
		ВыполнятьТест = Настройки.Используется;	
	КонецЕсли;
	
	Возврат ВыполнятьТест;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПроверяемыеРоли(Префикс)
	
	ПроверяемыеРоли_ = Новый Массив;
	Для каждого Роль Из Метаданные.Роли Цикл
	
		Если СтрНачинаетсяС(Роль.Имя, Префикс) Тогда
			ПроверяемыеРоли_.Добавить(Роль.Имя);
		КонецЕсли;
	
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступаРоли.Роль.Имя КАК Имя
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
	|		ПО ПрофилиГруппДоступаРоли.Ссылка = ПрофилиГруппДоступа.Ссылка
	|			И (ПрофилиГруппДоступаРоли.Роль ССЫЛКА Справочник.ИдентификаторыОбъектовМетаданных)
	|ГДЕ
	|	НЕ ПрофилиГруппДоступа.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрофилиГруппДоступаРоли.Роль.Имя
	|
	|УПОРЯДОЧИТЬ ПО
	|	Имя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если СтрНачинаетсяС(ВыборкаДетальныеЗаписи.Имя, Префикс) ИЛИ 
								СтрНачинаетсяС(ВыборкаДетальныеЗаписи.Имя, "?") Тогда
			// пропускаем
		Иначе
			ПроверяемыеРоли_.Добавить(ВыборкаДетальныеЗаписи.Имя);	
		КонецЕсли;
	КонецЦикла;
		
	Возврат ПроверяемыеРоли_;
	
КонецФункции

#КонецОбласти