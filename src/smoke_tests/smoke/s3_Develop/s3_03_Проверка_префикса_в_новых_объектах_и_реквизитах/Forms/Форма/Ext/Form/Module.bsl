#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Утверждения;
&НаКлиенте
Перем СтроковыеУтилиты;
&НаКлиенте
Перем ПрефиксОбъектов;
&НаКлиенте
Перем ИсключенияИзПроверок;
&НаКлиенте
Перем ВыводитьИсключения;
&НаКлиенте
Перем КонфигурацииПоставщика;
// add_plus Добавлено расширение
&НаКлиенте
Перем ПрефиксыРасширений;
// add_plus

#КонецОбласти

#Область ИнтерфейсТестирования

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	СтроковыеУтилиты = КонтекстЯдра.Плагин("СтроковыеУтилиты");
	
	Настройки(КонтекстЯдра, ИмяТеста());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт
	
	Инициализация(КонтекстЯдраПараметр);
	
	Если Не ВыполнятьТест(КонтекстЯдра) Тогда
		// add_plus
		НаборТестов.НачатьГруппу("Пропуск теста", Ложь);
		
		ПараметрыТеста = НаборТестов.ПараметрыТеста("Тест пропущен по настройке");
		НаборТестов.Добавить("ПропуститьТест", ПараметрыТеста, "Пропуск теста");  
		// add_plus
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПрефиксОбъектов) Тогда
		// add_plus
		НаборТестов.НачатьГруппу("Пропуск теста", Ложь);
		
		ПараметрыТеста = НаборТестов.ПараметрыТеста("Не указан префикс");
		НаборТестов.Добавить("ПропуститьТест", ПараметрыТеста, "Пропуск теста");
		// add_plus
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонфигурацииПоставщика) Тогда
		// add_plus
		НаборТестов.НачатьГруппу("Пропуск теста", Ложь);
		
		ПараметрыТеста = НаборТестов.ПараметрыТеста("Не найдена конфигурация поставщика");
		НаборТестов.Добавить("ПропуститьТест", ПараметрыТеста, "Пропуск теста");
		// add_plus
		
		Возврат;
	КонецЕсли;
	
	Пояснение = НСтр("ru = 'Проверка префикса в новом объекте/реквизите'");
	ОбъектыМетаданных = СтруктураОбъектовМетаданных(КонфигурацииПоставщика);

	// add_plus
	ЕстьТесты = Ложь; 
	// add_plus
	
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		
		Если Не ВыводитьИсключения Тогда
			МассивТестов = УбратьИсключения(ОбъектМетаданных.Значение);
		Иначе
			МассивТестов = ОбъектМетаданных.Значение;
		КонецЕсли;
		
		Если МассивТестов.Количество() Тогда
			НаборТестов.НачатьГруппу(ОбъектМетаданных.Ключ, Истина);;
		КонецЕсли;
		Для Каждого Тест Из МассивТестов Цикл			
			ИмяТеста = СтроковыеУтилиты.ПодставитьПараметрыВСтроку("%1 [%2]", Тест.ПолноеИмя, Пояснение);
			НаборТестов.Добавить(Тест.ИмяПроцедуры, НаборТестов.ПараметрыТеста(Тест.ПолноеИмя, Тест.Имя), ИмяТеста);
			// add_plus
			ЕстьТесты = Истина;
			// add_plus
		КонецЦикла;
	КонецЦикла;
	
	// add_plus
	Если Не ЕстьТесты Тогда
		НаборТестов.НачатьГруппу("Пропуск теста", Ложь);
		
		ПараметрыТеста = НаборТестов.ПараметрыТеста("Отсутствуют тестовые данные");
		НаборТестов.Добавить("ПропуститьТест", ПараметрыТеста, "Пропуск теста");	
	КонецЕсли; 
	// add_plus
			
КонецПроцедуры

#КонецОбласти

#Область РаботаСНастройками

&НаКлиенте
Процедура Настройки(мКонтекстЯдра, Знач ПутьНастройки)

	Если ЗначениеЗаполнено(Объект.Настройки) Тогда
		Возврат;
	КонецЕсли;
	
	ПрефиксОбъектов = "";
	ИсключенияИзПроверок = Новый Соответствие;
	ВыводитьИсключения = Ложь;
	КонфигурацииПоставщика = Новый Структура;
	ПлагинНастроек = мКонтекстЯдра.Плагин("Настройки");
	Объект.Настройки = ПлагинНастроек.ПолучитьНастройку(ПутьНастройки);
	Настройки = Объект.Настройки;
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Объект.Настройки = Новый Структура(ПутьНастройки, Неопределено);
		Возврат;
	КонецЕсли;
		
	Если Настройки.Свойство("Префикс") Тогда
		ПрефиксОбъектов = ВРег(Настройки.Префикс);
	КонецЕсли;
	
	Если Настройки.Свойство("ВыводитьИсключения") Тогда
		ВыводитьИсключения = Настройки.ВыводитьИсключения;
	КонецЕсли;
	
	Если Настройки.Свойство("ИсключенияИзпроверок") Тогда
		ИсключенияИзПроверок(Настройки);
	КонецЕсли;
	
	Если Настройки.Свойство("КонфигурацияПоставщика") Тогда
		ПрочитатьФайлКонфигурацииПоставщика(мКонтекстЯдра, Настройки);
	КонецЕсли;
	
	// add_plus Добавлено расширение
	ПрефиксыРасширений = Новый Массив;
	Если Настройки.Свойство("ПрефиксыРасширений") Тогда
		ПрефиксыРасширений = Настройки.ПрефиксыРасширений;
	КонецЕсли;
	// add_plus
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлКонфигурацииПоставщика(мКонтекстЯдра, Настройки)
	
	#Если Не ВебКлиент Тогда
	ПутьФайлаКонфигурацииПоставщика = Настройки.КонфигурацияПоставщика;
	ПутьФайлаКонфигурацииПоставщика = ОбработатьОтносительныйПуть(ПутьФайлаКонфигурацииПоставщика, мКонтекстЯдра);
		
	Файл = Новый Файл(ПутьФайлаКонфигурацииПоставщика);
	Если Не Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеJson = Новый ЧтениеJSON;
	ЧтениеJson.ОткрытьФайл(ПутьФайлаКонфигурацииПоставщика);	
	КонфигурацииПоставщика = ПрочитатьJSON(ЧтениеJson);
	ЧтениеJson.Закрыть();
		
	Файл = Неопределено;
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ИсключенияИзПроверок(Настройки)

	Для Каждого ИсключенияИзПроверокПоОбъектам Из Настройки.ИсключенияИзпроверок Цикл
		Для Каждого ИсключениеИзПроверок Из ИсключенияИзПроверокПоОбъектам.Значение Цикл
			ИсключенияИзПроверок.Вставить(ВРег(ИсключенияИзПроверокПоОбъектам.Ключ + "." + ИсключениеИзПроверок), Истина); 	
		КонецЦикла;
	КонецЦикла;	

КонецПроцедуры

#КонецОбласти

#Область Тесты

&НаКлиенте
Процедура ТестДолжен_ПроверитьЧтоЕстьПрефиксУОбъектаИлиРеквизитов(ПолноеИмяМетаданных, ИмяМетаданных) Экспорт
	
	ПропускатьТест = ПропускатьТест(ПолноеИмяМетаданных);
	
	// add_plus Добавлено расширение
	Результат = ИмяСодержитПрефикс(ИмяМетаданных, ПрефиксОбъектов, ПрефиксыРасширений);
	Если Не Результат И ПропускатьТест.Пропустить Тогда
		Утверждения.ПропуститьТест(ТекстСообщения(ПолноеИмяМетаданных));
	Иначе
		Утверждения.Проверить(Результат, ТекстСообщения(ПолноеИмяМетаданных));
	КонецЕсли;
	// add_plus
	
КонецПроцедуры

// add_plus
&НаКлиенте
Процедура ПропуститьТест(Знач ПричинаПропускаТеста) Экспорт
	КонтекстЯдра.ПропуститьТест(ПричинаПропускаТеста);
КонецПроцедуры // add_plus

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПропускатьТест(ПолноеИмяМетаданных)

	Результат = Новый Структура;
	Результат.Вставить("ТекстСообщения", "");
	Результат.Вставить("Пропустить", Ложь);
	
	Если ИсключенИзПроверок(ВРег(ПолноеИмяМетаданных)) Тогда
		ШаблонСообщения = НСтр("ru = 'Объект ""%1"" исключен из проверки'");
		Результат.ТекстСообщения = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПолноеИмяМетаданных);
		Результат.Пропустить = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции 

&НаКлиенте
Функция ИсключенИзПроверок(ПолноеИмяМетаданных)
	
	Результат = Ложь;
	МассивСтрокИмени = СтроковыеУтилиты.РазложитьСтрокуВМассивПодстрок(ПолноеИмяМетаданных, ".");
	ИслючениеВсехОбъектов = СтроковыеУтилиты.ПодставитьПараметрыВСтроку("%1.*", МассивСтрокИмени[0]);
	
	Если ИсключенияИзПроверок.Получить(ВРег(ПолноеИмяМетаданных)) <> Неопределено
	 Или ИсключенияИзПроверок.Получить(ВРег(ИслючениеВсехОбъектов)) <> Неопределено Тогда
		Результат = Истина;	
	КонецЕсли;
	
	// add_plus Убираем часть объектов по префиксу
	Если МассивСтрокИмени.Количество() > 1 Тогда
		ИмяОбъекта = Врег(МассивСтрокИмени[1]);
		
		Если СтрНачинаетсяС(ИмяОбъекта, "ИТК")
			Или СтрНачинаетсяС(НРег(ИмяОбъекта), "кшд") // исключаем коннектор
			Или СтрНайти(ПолноеИмяМетаданных, "Удалить") > 0 Тогда
			Результат = Истина;
		КонецЕсли;		
	КонецЕсли;
	// add_plus
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция УбратьИсключения(МассивТестов)

	Результат = Новый Массив;
	
	Для Каждого Тест Из МассивТестов Цикл
		Если Не ИсключенИзПроверок(Тест.ПолноеИмя) Тогда
			Результат.Добавить(Тест);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ТекстСообщения(ПолноеИмяМетаданных)

	ШаблонСообщения = НСтр("ru = 'Не задан префикс объекта: %1.'");
	ТекстСообщения = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПолноеИмяМетаданных);
	
	Возврат ТекстСообщения;

КонецФункции

&НаСервереБезКонтекста
Функция СтруктураОбъектовМетаданных(КонфигурацииПоставщика)
	
	МассивИменОбъектовМетаданных = МассивИменОбъектовМетаданных();
		
	СтруктураОбъектовМетаданных = Новый Структура;
	Для Каждого ЭлементМассива Из МассивИменОбъектовМетаданных Цикл
		СтруктураОбъектовМетаданных.Вставить(ЭлементМассива, Новый Массив);
	КонецЦикла;
	
	Для Каждого ЭлементСтруктурыОбъектовМетаданных Из СтруктураОбъектовМетаданных Цикл
		Для Каждого ОбъектМетаданных Из Метаданные[ЭлементСтруктурыОбъектовМетаданных.Ключ] Цикл
			
			ОбработатьВесьОбъект = Истина;
			
			Для Каждого КонфигурацияПоставщика Из КонфигурацииПоставщика Цикл 
				// add_plus
				Если ТипЗнч(КонфигурацияПоставщика) = Тип("Строка") Тогда
					Продолжить;
				КонецЕсли;				
				
				ОбластьКонфигурацииПоставщика = Неопределено;
				Если Не КонфигурацияПоставщика.Значение.Свойство(ЭлементСтруктурыОбъектовМетаданных.Ключ, ОбластьКонфигурацииПоставщика) Тогда
					Продолжить;
				КонецЕсли;
				// add_plus
				
				Если ОбластьКонфигурацииПоставщика.Найти(ОбъектМетаданных.Имя) <> Неопределено Тогда
					ОбработатьВесьОбъект = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ОбработатьВесьОбъект Тогда
				
				ДобавитьЭлементКоллекцииОбъектовМетаданных(
					СтруктураОбъектовМетаданных[ЭлементСтруктурыОбъектовМетаданных.Ключ], 
					ОбъектМетаданных.Имя, 
					ОбъектМетаданных.ПолноеИмя());					
					
			Иначе
					
				Параметры = Новый Структура;
				Параметры.Вставить("ОбъектМетаданных", ОбъектМетаданных);
				Параметры.Вставить("СтруктураОбъектовМетаданных", СтруктураОбъектовМетаданных);
				Параметры.Вставить("ИмяМетаданных", ЭлементСтруктурыОбъектовМетаданных.Ключ);
				Параметры.Вставить("Область", ОбластьКонфигурацииПоставщика);
				
				ОбработатьЭлементыОбъекта(Параметры, "Подсистемы", "Подсистема");
				ОбработатьЭлементыОбъекта(Параметры, "ЗначенияПеречисления", "ЗначениеПеречисления");
				ОбработатьЭлементыОбъекта(Параметры, "Измерения", "Измерение");
				ОбработатьЭлементыОбъекта(Параметры, "Ресурсы", "Ресурс");
				ОбработатьЭлементыОбъекта(Параметры, "Реквизиты", "Реквизит");
				ОбработатьЭлементыОбъекта(Параметры, "РеквизитыАдресации", "РеквизитАдресации");
				ОбработатьЭлементыОбъекта(Параметры, "Перерасчеты", "Перерасчет");
				ОбработатьЭлементыОбъекта(Параметры, "ПризнакиУчета", "ПризнакУчета");
				ОбработатьЭлементыОбъекта(Параметры, "ПризнакиУчетаСубконто", "ПризнакУчетаСубконто");
				ОбработатьКоллекциюОбъекта(Параметры, "ТабличныеЧасти", "ТабличнаяЧасть", "Реквизиты", "Реквизит");
				ОбработатьКоллекциюОбъекта(Параметры, "Операции", "Операция", "Параметры", "Параметр");
				ОбработатьЭлементыОбъекта(Параметры, "Графы", "Граф");
				ОбработатьЭлементыОбъекта(Параметры, "Формы", "Форма");
				ОбработатьЭлементыОбъекта(Параметры, "Команды", "Команда");
				ОбработатьЭлементыОбъекта(Параметры, "Макеты", "Макет");

			КонецЕсли;
				
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтруктураОбъектовМетаданных;

КонецФункции 

&НаСервереБезКонтекста
Процедура ОбработатьКоллекциюОбъекта(Параметры, ИмяНабораКоллекции, ИмяЭлементаНабора, ИмяЭлементов, ИмяЭлемента)

	ОбъектМетаданных = Параметры.ОбъектМетаданных;
	СтруктураОбъектовМетаданных = Параметры.СтруктураОбъектовМетаданных;
	ИмяМетаданных = Параметры.ИмяМетаданных;
	ОбластьКонфигурацииПоставщика = Параметры.Область;
	ШаблонКоллекции = "%1.%2.%3";
	ШаблонЭлементов = "%1.%2.%3.%4.%5";
	
	Если Не ЕстьРеквизитИлиСвойствоОбъекта(ОбъектМетаданных, ИмяНабораКоллекции) Тогда
		Возврат;
	КонецЕсли;
	
	СтроковыеУтилиты = СтроковыеУтилиты();
	
	Для Каждого ЭлементНабораКоллекции Из ОбъектМетаданных[ИмяНабораКоллекции] Цикл
		
		ИмяДляПоиска = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(
						ШаблонКоллекции, 
						ОбъектМетаданных.Имя, 
						ИмяНабораКоллекции, 
						ЭлементНабораКоллекции.Имя);
		
		Если ОбластьКонфигурацииПоставщика.Найти(ИмяДляПоиска) = Неопределено Тогда
			ДобавитьЭлементКоллекцииОбъектовМетаданных(
				СтруктураОбъектовМетаданных[ИмяМетаданных], 
				ЭлементНабораКоллекции.Имя, 
				ЭлементНабораКоллекции.ПолноеИмя());
			Продолжить;
		КонецЕсли;
		
		Для Каждого ЭлементКоллекции Из ЭлементНабораКоллекции[ИмяЭлементов] Цикл
			
			ИмяДляПоиска = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(ШаблонЭлементов, 
							ОбъектМетаданных.Имя, 
							ИмяНабораКоллекции, 
							ЭлементНабораКоллекции.Имя, 
							ИмяЭлементов, 
							ЭлементКоллекции.Имя);
							
			Если ОбластьКонфигурацииПоставщика.Найти(ИмяДляПоиска) = Неопределено Тогда
				ДобавитьЭлементКоллекцииОбъектовМетаданных(
					СтруктураОбъектовМетаданных[ИмяМетаданных], 
					ЭлементКоллекции.Имя, 
					ЭлементКоллекции.ПолноеИмя());
			КонецЕсли;
				
		КонецЦикла;	
		
	КонецЦикла;

КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ОбработатьЭлементыОбъекта(Параметры, ИмяКоллекции, ИмяЭлемента, ИмяРодителяДляПоиска = "", ИмяРодителя = "")

	ОбъектМетаданных = Параметры.ОбъектМетаданных;
	СтруктураОбъектовМетаданных = Параметры.СтруктураОбъектовМетаданных;
	ИмяМетаданных = Параметры.ИмяМетаданных;
	ОбластьКонфигурацииПоставщика = Параметры.Область;
	
	Если Не ЕстьРеквизитИлиСвойствоОбъекта(ОбъектМетаданных, ИмяКоллекции) Тогда
		Возврат;
	КонецЕсли;
	
	СтроковыеУтилиты = СтроковыеУтилиты();
	
	Для Каждого ЭлементКоллекции Из ОбъектМетаданных[ИмяКоллекции] Цикл
		
		мИмяДляПоиска = ?(ЗначениеЗаполнено(ИмяРодителяДляПоиска), ИмяРодителяДляПоиска, ОбъектМетаданных.Имя);
		ИмяДляПоиска = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(
						"%1.%2.%3", 
						мИмяДляПоиска, 
						ИмяКоллекции, 
						ЭлементКоллекции.Имя);
						
		мИмяОбъекта = ?(ЗначениеЗаполнено(ИмяРодителя), ИмяРодителя, ОбъектМетаданных.Имя);
		ИмяОбъекта = СтроковыеУтилиты.ПодставитьПараметрыВСтроку("%1.%2.%3", мИмяОбъекта, ИмяЭлемента, ЭлементКоллекции.Имя);
		
		Если ОбластьКонфигурацииПоставщика.Найти(ИмяДляПоиска) = Неопределено Тогда
			ДобавитьЭлементКоллекцииОбъектовМетаданных(
				СтруктураОбъектовМетаданных[ИмяМетаданных], 
				ЭлементКоллекции.Имя, 
				ЭлементКоллекции.ПолноеИмя());
		КонецЕсли;
		
		Если Не ЕстьРеквизитИлиСвойствоОбъекта(ЭлементКоллекции, ИмяКоллекции) Тогда
			мПараметры = Новый Структура;
			мПараметры.Вставить("ОбъектМетаданных", ЭлементКоллекции);
			мПараметры.Вставить("СтруктураОбъектовМетаданных", СтруктураОбъектовМетаданных);
			мПараметры.Вставить("ИмяМетаданных", ИмяМетаданных);
			мПараметры.Вставить("Область", ОбластьКонфигурацииПоставщика);		
			ОбработатьЭлементыОбъекта(мПараметры, ИмяКоллекции, ИмяЭлемента, ИмяДляПоиска, ИмяОбъекта);
		КонецЕсли;
				
	КонецЦикла;

КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ДобавитьЭлементКоллекцииОбъектовМетаданных(Коллекция, Имя, ПолноеИмя)

	СтруктураТеста = Новый Структура;
	СтруктураТеста.Вставить("Имя", Имя);
	СтруктураТеста.Вставить("ПолноеИмя", ПолноеИмя);
	СтруктураТеста.Вставить("ИмяПроцедуры", "ТестДолжен_ПроверитьЧтоЕстьПрефиксУОбъектаИлиРеквизитов");
	Коллекция.Добавить(СтруктураТеста);

КонецПроцедуры 

&НаКлиенте
Процедура ПоместитьФайлИнтерактивно(Команда)
	
    ОбработкаОкончанияВыбора = Новый ОписаниеОповещения("ОбработкаОкончанияВыбора", ЭтотОбъект);
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВыборФайла.Фильтр = "Текстовый документ (txt)|*.txt";
	ВыборФайла.МножественныйВыбор = Ложь;
	
	ВыборФайла.Показать(ОбработкаОкончанияВыбора);
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОкончанияВыбора(ВыбранныеФайлы, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныеФайлы) Тогда		
		ТекстJSON = ОбработатьФайлКонфигурацииПоставщика(ВыбранныеФайлы[0]);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьФайлКонфигурацииПоставщика(ИмяФайла)

#Если Не ВебКлиент Тогда

	ИмяКонфигурации = "";
	СтрокаКонфигурацииПоставщика = Новый Массив;
	СтруктураОбъектовМетаданных = Новый Структура;  
	МассивИменОбъектовМетаданных = МассивИменОбъектовМетаданных();
	
	Для Каждого ЭлементМассива Из МассивИменОбъектовМетаданных Цикл
		СтруктураОбъектовМетаданных.Вставить(ЭлементМассива, Новый Массив);	
	КонецЦикла;
	
	ШаблонПоиска = СтрСоединить(МассивИменОбъектовМетаданных, "|");
	Файл = Новый ЧтениеТекста(ИмяФайла);
	Строка = Файл.ПрочитатьСтроку();
	Пока Строка <> Неопределено Цикл
		Если СтрНайти(СокрЛП(Строка), "- Конфигурации.") Тогда
			ИмяКонфигурации = СтрЗаменить(Строка, "- Конфигурации.", "");	
		КонецЕсли;
		Если СтрНайти(СокрЛП(Строка), "-") Тогда
			Строка = СтрЗаменить(Строка, "- ", "");
			СтрокаКонфигурацииПоставщика.Добавить(СокрЛП(Строка));
		КонецЕсли;
		Строка = Файл.ПрочитатьСтроку();
	КонецЦикла;
	
	Файл.Закрыть();
	
	Для Каждого СтрокаКонфигурацииПоставщика Из СтрокаКонфигурацииПоставщика Цикл
		МассивСтрок = СтрРазделить(СтрокаКонфигурацииПоставщика, ".");
		ИмяСвойства = МассивСтрок[0];
		Попытка 
			ЕстьСвойство = СтруктураОбъектовМетаданных.Свойство(ИмяСвойства);
		Исключение
			ЕстьСвойство = Ложь;
		КонецПопытки;
		Если ЕстьСвойство Тогда
			МассивСтрок.Удалить(0);
			НоваяСтрока = СтрСоединить(МассивСтрок, ".");
			СтруктураОбъектовМетаданных[ИмяСвойства].Добавить(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураКонфигурацииПоставщика = Новый Структура;
	СтруктураКонфигурацииПоставщика.Вставить(ИмяКонфигурации, СтруктураОбъектовМетаданных);
	
	ЗаписьJSON = Новый ЗаписьJSON; 
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(); 
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON, СтруктураКонфигурацииПоставщика);
	
	Возврат ЗаписьJSON.Закрыть();

#Иначе
	Возврат "";
#КонецЕсли
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивИменОбъектовМетаданных()

	МассивИменОбъектовМетаданных = Новый Массив;
	                                 
	МассивИменОбъектовМетаданных.Добавить("Подсистемы");    
	МассивИменОбъектовМетаданных.Добавить("ОбщиеМодули");
	МассивИменОбъектовМетаданных.Добавить("ПараметрыСеанса");
	МассивИменОбъектовМетаданных.Добавить("Роли");
	МассивИменОбъектовМетаданных.Добавить("ОбщиеРеквизиты");
	МассивИменОбъектовМетаданных.Добавить("ПланыОбмена");
	МассивИменОбъектовМетаданных.Добавить("КритерииОтбора");
	МассивИменОбъектовМетаданных.Добавить("ПодпискиНаСобытия");
	МассивИменОбъектовМетаданных.Добавить("РегламентныеЗадания");
	МассивИменОбъектовМетаданных.Добавить("ФункциональныеОпции");	
	МассивИменОбъектовМетаданных.Добавить("ПараметрыФункциональныхОпций");
	МассивИменОбъектовМетаданных.Добавить("ОпределяемыеТипы");
	МассивИменОбъектовМетаданных.Добавить("ХранилищаНастроек");
	МассивИменОбъектовМетаданных.Добавить("ОбщиеФормы");
	МассивИменОбъектовМетаданных.Добавить("ОбщиеКоманды");
	МассивИменОбъектовМетаданных.Добавить("ГруппыКоманд");
	МассивИменОбъектовМетаданных.Добавить("Интерфейсы");
	МассивИменОбъектовМетаданных.Добавить("ОбщиеМакеты");
	МассивИменОбъектовМетаданных.Добавить("ОбщиеКартинки");
	МассивИменОбъектовМетаданных.Добавить("ПакетыXDTO");
	МассивИменОбъектовМетаданных.Добавить("WebСервисы");
	МассивИменОбъектовМетаданных.Добавить("HTTPСервисы");  
	МассивИменОбъектовМетаданных.Добавить("WSСсылки");
	МассивИменОбъектовМетаданных.Добавить("ЭлементыСтиля");
	МассивИменОбъектовМетаданных.Добавить("Стили");
	МассивИменОбъектовМетаданных.Добавить("Языки");    
	МассивИменОбъектовМетаданных.Добавить("Константы");
	МассивИменОбъектовМетаданных.Добавить("Справочники");
	МассивИменОбъектовМетаданных.Добавить("Документы");
	МассивИменОбъектовМетаданных.Добавить("ЖурналыДокументов");
	МассивИменОбъектовМетаданных.Добавить("Перечисления");
	МассивИменОбъектовМетаданных.Добавить("Отчеты");
	МассивИменОбъектовМетаданных.Добавить("Обработки");
	МассивИменОбъектовМетаданных.Добавить("ПланыВидовХарактеристик");
	МассивИменОбъектовМетаданных.Добавить("ПланыСчетов");
	МассивИменОбъектовМетаданных.Добавить("ПланыВидовРасчета");
	МассивИменОбъектовМетаданных.Добавить("РегистрыСведений");
	МассивИменОбъектовМетаданных.Добавить("РегистрыНакопления");
	МассивИменОбъектовМетаданных.Добавить("РегистрыБухгалтерии");
	МассивИменОбъектовМетаданных.Добавить("РегистрыРасчета");
	МассивИменОбъектовМетаданных.Добавить("БизнесПроцессы");
	МассивИменОбъектовМетаданных.Добавить("Задачи");
	МассивИменОбъектовМетаданных.Добавить("ВнешниеИсточникиДанных");
	
	Возврат МассивИменОбъектовМетаданных;

КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

&НаКлиенте
Функция ОбработатьОтносительныйПуть(Знач ОтносительныйПуть, КонтекстЯдра)

	Если Лев(ОтносительныйПуть, 1) = "." И ЗначениеЗаполнено(КонтекстЯдра.Объект.КаталогПроекта) Тогда
		ОтносительныйПуть = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(
								"%1%2", 
								КонтекстЯдра.Объект.КаталогПроекта, 
								Сред(ОтносительныйПуть, 2));
	КонецЕсли;
	
	Результат = СтрЗаменить(ОтносительныйПуть, "\\", "\");
		
	Возврат Результат;

КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяСодержитПрефикс(Имя, Префикс, ПрефиксыРасширений)
	
	Если Не ЗначениеЗаполнено(Префикс) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// add_plus Префикс расширения
	ЕстьПрефикс = СтрНачинаетсяС(ВРег(Имя), ВРег(Префикс));
	
	Если ПрефиксыРасширений.Количество() Тогда
		ЕстьПрефиксРасширения = Ложь;
		
		Для Каждого ПрефиксРасширения Из ПрефиксыРасширений Цикл
			Если СтрНачинаетсяС(ВРег(Имя), ВРег(ПрефиксРасширения)) Тогда
				ЕстьПрефиксРасширения = Истина;	
			КонецЕсли;
		КонецЦикла;	
	Иначе
		ЕстьПрефиксРасширения = Ложь;	
	КонецЕсли;
	
	Возврат ЕстьПрефикс Или ЕстьПрефиксРасширения; 
	// add_plus
	
КонецФункции

&НаСервереБезКонтекста
Функция СтроковыеУтилиты()
	Возврат ВнешниеОбработки.Создать("СтроковыеУтилиты");	
КонецФункции 

&НаКлиенте
Функция ИмяТеста()
	
	Если Не ЗначениеЗаполнено(Объект.ИмяТеста) Тогда
		Объект.ИмяТеста = ИмяТестаНаСервере();
	КонецЕсли;
	
	Возврат Объект.ИмяТеста;
	
КонецФункции

&НаСервере
Функция ИмяТестаНаСервере()
	Возврат РеквизитФормыВЗначение("Объект").Метаданные().Имя;
КонецФункции

&НаКлиенте
Функция ВыполнятьТест(КонтекстЯдра)
	
	ВыполнятьТест = Ложь;
	ПутьНастройки = ИмяТеста();
	Настройки(КонтекстЯдра, ПутьНастройки);
	Настройки = Объект.Настройки;
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Возврат ВыполнятьТест;
	КонецЕсли;
		
	Если ТипЗнч(Настройки) = Тип("Структура") И Настройки.Свойство("Используется") Тогда
		ВыполнятьТест = Настройки.Используется;	
	КонецЕсли;
	
	Возврат ВыполнятьТест;

КонецФункции

#КонецОбласти
