#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстЯдра, Утверждения, СтроковыеУтилиты;
&НаКлиенте
Перем ИсключенияИзПроверок, ВыводитьИсключения;
&НаКлиенте
Перем ОтборПоПрефиксу, Префикс, КонфигурацииПоставщика;
&НаКлиенте
Перем ПрефиксыРасширений;

#КонецОбласти

#Область ИнтерфейсТестирования

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра 		= КонтекстЯдраПараметр;
	Утверждения 		= КонтекстЯдра.Плагин("БазовыеУтверждения");
	СтроковыеУтилиты 	= КонтекстЯдра.Плагин("СтроковыеУтилиты");
	
	Настройки(КонтекстЯдра, ИмяТеста());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт
	
	Инициализация(КонтекстЯдраПараметр);
	
	Если Не ВыполнятьТест(КонтекстЯдра) Тогда
		НаборТестов.НачатьГруппу("Пропуск теста", Ложь);
		
		ПараметрыТеста = НаборТестов.ПараметрыТеста("Тест пропущен по настройке");
		НаборТестов.Добавить("ПропуститьТест", ПараметрыТеста, "Пропуск теста");
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Префикс) Тогда
		НаборТестов.НачатьГруппу("Пропуск теста", Ложь);
		
		ПараметрыТеста = НаборТестов.ПараметрыТеста("Не указан префикс");
		НаборТестов.Добавить("ПропуститьТест", ПараметрыТеста, "Пропуск теста");
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонфигурацииПоставщика) Тогда
		НаборТестов.НачатьГруппу("Пропуск теста", Ложь);
		
		ПараметрыТеста = НаборТестов.ПараметрыТеста("Не найдена конфигурация поставщика");
		НаборТестов.Добавить("ПропуститьТест", ПараметрыТеста, "Пропуск теста");
		
		Возврат;
	КонецЕсли;
	
	Пояснение = НСтр("ru = 'Проверка префикса в предопределенных элементах'");
	ОбъектыМетаданных = СтруктураОбъектовМетаданных(КонфигурацииПоставщика);
	
	ЕстьТесты = Ложь;
	
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		
		Если Не ВыводитьИсключения Тогда
			МассивТестов = УбратьИсключения(ОбъектМетаданных.Значение);
		Иначе
			МассивТестов = ОбъектМетаданных.Значение;
		КонецЕсли;
		
		Если МассивТестов.Количество() Тогда
			НаборТестов.НачатьГруппу(ОбъектМетаданных.Ключ, Истина);;
		КонецЕсли;
		Для Каждого Тест Из МассивТестов Цикл			
			ИмяТеста = СтроковыеУтилиты.ПодставитьПараметрыВСтроку("%1 [%2]", Тест.ПолноеИмя, Пояснение);
			НаборТестов.Добавить(Тест.ИмяПроцедуры, НаборТестов.ПараметрыТеста(Тест.ПолноеИмя, Тест.Имя), ИмяТеста);
			ЕстьТесты = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ЕстьТесты Тогда
		НаборТестов.НачатьГруппу("Пропуск теста", Ложь);
		
		ПараметрыТеста = НаборТестов.ПараметрыТеста("Отсутствуют тестовые данные");
		НаборТестов.Добавить("ПропуститьТест", ПараметрыТеста, "Пропуск теста");	
	КонецЕсли;
				
КонецПроцедуры

#КонецОбласти

#Область РаботаСНастройками

&НаКлиенте
Процедура Настройки(мКонтекстЯдра, Знач ПутьНастройки)

	Если ЗначениеЗаполнено(Объект.Настройки) Тогда
		Возврат;
	КонецЕсли;
	
	Префикс = "";
	ОтборПоПрефиксу = Ложь;	
	ВыводитьИсключения = Истина;
	ИсключенияИзПроверок = Новый Соответствие;
	КонфигурацииПоставщика = Новый Структура;
	
	ПлагинНастроек 		= мКонтекстЯдра.Плагин("Настройки");
	Объект.Настройки 	= ПлагинНастроек.ПолучитьНастройку(ПутьНастройки);
	Настройки 			= Объект.Настройки;
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Объект.Настройки = Новый Структура(ПутьНастройки, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Настройки.Свойство("Префикс") Тогда
		Префикс = ВРег(Настройки.Префикс);		
	КонецЕсли;
	
	ПрефиксыРасширений = Новый Массив;
	Если Настройки.Свойство("ПрефиксыРасширений") Тогда
		ПрефиксыРасширений = Настройки.ПрефиксыРасширений;
	КонецЕсли;
	
	Если Настройки.Свойство("ОтборПоПрефиксу") Тогда
		ОтборПоПрефиксу = Настройки.ОтборПоПрефиксу;		
	КонецЕсли;

	Если Настройки.Свойство("ВыводитьИсключения") Тогда
		ВыводитьИсключения = Настройки.ВыводитьИсключения;
	КонецЕсли;
	
	Если Настройки.Свойство("ИсключенияИзПроверок") Тогда
		ИсключенияИзПроверок(Настройки);
	КонецЕсли;   
	
	Если Настройки.Свойство("КонфигурацияПоставщика") Тогда
		ПрочитатьФайлКонфигурацииПоставщика(мКонтекстЯдра, Настройки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлКонфигурацииПоставщика(мКонтекстЯдра, Настройки)
	
	#Если Не ВебКлиент Тогда
	ПутьФайлаКонфигурацииПоставщика = Настройки.КонфигурацияПоставщика;
	ПутьФайлаКонфигурацииПоставщика = ОбработатьОтносительныйПуть(ПутьФайлаКонфигурацииПоставщика, мКонтекстЯдра);
	Файл = Новый Файл(ПутьФайлаКонфигурацииПоставщика);
	
	Если Не Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
		
	ЧтениеJson = Новый ЧтениеJSON;
	ЧтениеJson.ОткрытьФайл(ПутьФайлаКонфигурацииПоставщика);	
	КонфигурацииПоставщика = ПрочитатьJSON(ЧтениеJson);
	ЧтениеJson.Закрыть();
		
	Файл = Неопределено;
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Функция ОбработатьОтносительныйПуть(Знач ОтносительныйПуть, КонтекстЯдра)

	Если Лев(ОтносительныйПуть, 1) = "." И ЗначениеЗаполнено(КонтекстЯдра.Объект.КаталогПроекта) Тогда
		ОтносительныйПуть = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(
								"%1%2", 
								КонтекстЯдра.Объект.КаталогПроекта, 
								Сред(ОтносительныйПуть, 2));
	КонецЕсли;
	
	Результат = СтрЗаменить(ОтносительныйПуть, "\\", "\");
		
	Возврат Результат;

КонецФункции 

&НаКлиенте
Процедура ИсключенияИзПроверок(Настройки)

	Для Каждого ИсключенияИзПроверокПоОбъектам Из Настройки.ИсключенияИзПроверок Цикл
		
		Если ТипЗнч(ИсключенияИзПроверокПоОбъектам) = Тип("Соответствие") Тогда			
			Для Каждого ИсключениеИзПроверок Из ИсключенияИзПроверокПоОбъектам.Значение Цикл
				ИсключенияИзПроверок.Вставить(ВРег(ИсключенияИзПроверокПоОбъектам.Ключ + "." + ИсключениеИзПроверок), Истина); 	
			КонецЦикла;
		Иначе
			ИсключенияИзПроверок.Вставить(ВРег(ИсключенияИзПроверокПоОбъектам), Истина);
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры

#КонецОбласти

#Область Тесты

&НаКлиенте
Процедура ТестДолжен_ПроверитьЧтоЕстьПрефиксВПредопределенныхИменах(ПолноеИмяМетаданных,ИмяМетаданных) Экспорт
		
	ПропускатьТест = ПропускатьТест(ПолноеИмяМетаданных);
	
	Результат = ИмяСодержитПрефикс(ИмяМетаданных, Префикс, ПрефиксыРасширений);	
	
	Если Не Результат И ПропускатьТест.Пропустить Тогда
		Утверждения.ПропуститьТест(ТекстСообщения(ПолноеИмяМетаданных));
	Иначе
		Утверждения.Проверить(Результат, ТекстСообщения(ПолноеИмяМетаданных));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяСодержитПрефикс(Имя, Префикс, ПрефиксыРасширений)
	
	Если Не ЗначениеЗаполнено(Префикс) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьПрефикс = СтрНачинаетсяС(ВРег(Имя), ВРег(Префикс));
	
	Если ПрефиксыРасширений.Количество() Тогда
		ЕстьПрефиксРасширения = Ложь;
		
		Для Каждого ПрефиксРасширения Из ПрефиксыРасширений Цикл
			Если СтрНачинаетсяС(ВРег(Имя), ВРег(ПрефиксРасширения)) Тогда
				ЕстьПрефиксРасширения = Истина;	
			КонецЕсли;
		КонецЦикла;	
	Иначе
		ЕстьПрефиксРасширения = Ложь;	
	КонецЕсли;
	
	Возврат ЕстьПрефикс Или ЕстьПрефиксРасширения; 
	
КонецФункции

&НаКлиенте
Процедура ПропуститьТест(Знач ПричинаПропускаТеста) Экспорт
	КонтекстЯдра.ПропуститьТест(ПричинаПропускаТеста);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПропускатьТест(ПолноеИмяМетаданных)

	Результат = Новый Структура;
	Результат.Вставить("ТекстСообщения", "");
	Результат.Вставить("Пропустить", Ложь);
		
	Если ИсключенИзПроверок(ВРег(ПолноеИмяМетаданных)) Тогда
		ШаблонСообщения = НСтр("ru = '""%1"" исключен из проверки.'");
		Результат.ТекстСообщения = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПолноеИмяМетаданных);
		Результат.Пропустить = Истина;
		Возврат Результат;
	КонецЕсли;
			
	Возврат Результат;

КонецФункции 

&НаКлиенте
Функция ИсключенИзПроверок(ПолноеИмяМетаданных)
	
	Результат = Ложь;
	МассивСтрокИмени = СтроковыеУтилиты.РазложитьСтрокуВМассивПодстрок(ПолноеИмяМетаданных, ".");
	ИсключениеВсехОбъектов = СтроковыеУтилиты.ПодставитьПараметрыВСтроку("%1.*", МассивСтрокИмени[0]);
	
	Если ИсключенияИзПроверок.Получить(ВРег(ПолноеИмяМетаданных)) <> Неопределено
	 Или ИсключенияИзПроверок.Получить(ВРег(ИсключениеВсехОбъектов)) <> Неопределено Тогда
		Результат = Истина;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция УбратьИсключения(МассивТестов)

	Результат = Новый Массив;
	
	Для Каждого Тест Из МассивТестов Цикл
		Если Не ИсключенИзПроверок(Тест.ПолноеИмя) Тогда
			Результат.Добавить(Тест);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ТекстСообщения(ПолноеИмяМетаданных)
	
	ШаблонСообщения = НСтр("ru = 'Для добавленного элемента не указан префикс: %1.'");
	Если СтрЗаканчиваетсяНа(ВРЕГ(ПолноеИмяМетаданных),".КОД") Тогда
		ШаблонСообщения = НСтр("ru = 'Для добавленного элемента не указан префикс в коде: %1.'");
	КонецЕсли;
	
	ТекстСообщения = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПолноеИмяМетаданных);
	
	Возврат ТекстСообщения;

КонецФункции

&НаКлиенте
Функция ИмяТеста()
	
	Если Не ЗначениеЗаполнено(Объект.ИмяТеста) Тогда
		Объект.ИмяТеста = ИмяТестаНаСервере();
	КонецЕсли;
	
	Возврат Объект.ИмяТеста;
	
КонецФункции

&НаСервере
Функция ИмяТестаНаСервере()
	Возврат РеквизитФормыВЗначение("Объект").Метаданные().Имя;
КонецФункции

&НаКлиенте
Функция ВыполнятьТест(КонтекстЯдра)
	
	ВыполнятьТест = Ложь;
	Настройки(КонтекстЯдра, ИмяТеста());
	Настройки = Объект.Настройки;
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Возврат ВыполнятьТест;
	КонецЕсли;
		
	Если ТипЗнч(Настройки) = Тип("Структура") 
		И Настройки.Свойство("Используется") Тогда
		
		ВыполнятьТест = Настройки.Используется;	
	КонецЕсли;
	
	Возврат ВыполнятьТест;

КонецФункции

&НаСервереБезКонтекста
Функция СтроковыеУтилиты()
	Возврат ВнешниеОбработки.Создать("СтроковыеУтилиты");	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураОбъектовМетаданных(КонфигурацииПоставщика)
	
	МассивИменОбъектовМетаданных = МассивИменОбъектовМетаданных();
		
	СтруктураОбъектовМетаданных = Новый Структура;
	Для Каждого ЭлементМассива Из МассивИменОбъектовМетаданных Цикл
		СтруктураОбъектовМетаданных.Вставить(ЭлементМассива, Новый Массив);
	КонецЦикла;
	
	Для Каждого ЭлементСтруктурыОбъектовМетаданных Из СтруктураОбъектовМетаданных Цикл
		Для Каждого ОбъектМетаданных Из Метаданные[ЭлементСтруктурыОбъектовМетаданных.Ключ] Цикл
			
			Если ОбъектМетаданных.Имя = "ИдентификаторыОбъектовМетаданных" Тогда
				Продолжить;
			КонецЕсли;
			
			ОбработатьВесьОбъект = Ложь;
			
			Для Каждого КонфигурацияПоставщика Из КонфигурацииПоставщика Цикл
				ОбластьКонфигурацииПоставщика = КонфигурацияПоставщика.Значение[ЭлементСтруктурыОбъектовМетаданных.Ключ];
				Если ОбластьКонфигурацииПоставщика.Найти(ОбъектМетаданных.Имя) <> Неопределено Тогда
					ОбработатьВесьОбъект = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ОбработатьВесьОбъект Тогда
				 
				Параметры = Новый Структура;
				Параметры.Вставить("ОбъектМетаданных", ОбъектМетаданных);
				Параметры.Вставить("СтруктураОбъектовМетаданных", СтруктураОбъектовМетаданных);
				Параметры.Вставить("ИмяМетаданных", ЭлементСтруктурыОбъектовМетаданных.Ключ);
				Параметры.Вставить("Область", ОбластьКонфигурацииПоставщика);
				
 				ОбработатьЭлементыОбъекта(Параметры, "ПредопределенныеДанные", "ПредопределенныеДанные");
				
			КонецЕсли;
				
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтруктураОбъектовМетаданных;

КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция МассивИменОбъектовМетаданных()

	МассивИменОбъектовМетаданных = Новый Массив;
	                                 
	
	МассивИменОбъектовМетаданных.Добавить("Справочники");
	МассивИменОбъектовМетаданных.Добавить("ПланыВидовХарактеристик");
	МассивИменОбъектовМетаданных.Добавить("ПланыСчетов");
	МассивИменОбъектовМетаданных.Добавить("ПланыВидовРасчета");
	
	Возврат МассивИменОбъектовМетаданных;

КонецФункции

&НаСервереБезКонтекста
Процедура ОбработатьЭлементыОбъекта(Параметры, ИмяКоллекции, ИмяЭлемента, ИмяРодителяДляПоиска = "", ИмяРодителя = "")

	ОбъектМетаданных = Параметры.ОбъектМетаданных;
	СтруктураОбъектовМетаданных = Параметры.СтруктураОбъектовМетаданных;
	ИмяМетаданных = Параметры.ИмяМетаданных;
	ОбластьКонфигурацииПоставщика = Параметры.Область;
	
	СтроковыеУтилиты = СтроковыеУтилиты();
		
	ПредопределенныхЭлементы = ПолучитьПредопределенныеЭлементы(ИмяМетаданных,ОбъектМетаданных);
	Для Каждого ЭлементКоллекции Из ПредопределенныхЭлементы Цикл
		
		мИмяДляПоиска = ?(ЗначениеЗаполнено(ИмяРодителяДляПоиска), ИмяРодителяДляПоиска, ОбъектМетаданных.Имя);
		ИмяДляПоиска = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(
						"%1.%2.%3", 
						мИмяДляПоиска, 
						ИмяКоллекции, 
						ЭлементКоллекции.Имя);
						
		мИмяОбъекта = ?(ЗначениеЗаполнено(ИмяРодителя), ИмяРодителя, ОбъектМетаданных.Имя);
		ИмяОбъекта = СтроковыеУтилиты.ПодставитьПараметрыВСтроку("%1.%2.%3", мИмяОбъекта, ИмяЭлемента, ЭлементКоллекции.Имя);
		
		Если ОбластьКонфигурацииПоставщика.Найти(ИмяДляПоиска) = Неопределено Тогда
			ДобавитьЭлементКоллекцииОбъектовМетаданных(
				СтруктураОбъектовМетаданных[ИмяМетаданных], 
				ЭлементКоллекции.Имя, 
				ИмяОбъекта);
				
				Если ЗначениеЗаполнено(ЭлементКоллекции.Код) Тогда
					
					ДобавитьЭлементКоллекцииОбъектовМетаданных(
					СтруктураОбъектовМетаданных[ИмяМетаданных], 
					ЭлементКоллекции.Код, 
					ИмяОбъекта+".Код");	
				КонецЕсли;
		КонецЕсли;
						
	КонецЦикла;

КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ДобавитьЭлементКоллекцииОбъектовМетаданных(Коллекция, Имя, ПолноеИмя)

	СтруктураТеста = Новый Структура;
	СтруктураТеста.Вставить("Имя", Имя);
	СтруктураТеста.Вставить("ПолноеИмя", ПолноеИмя);
	СтруктураТеста.Вставить("ИмяПроцедуры", "ТестДолжен_ПроверитьЧтоЕстьПрефиксВПредопределенныхИменах");
	Коллекция.Добавить(СтруктураТеста);

КонецПроцедуры   

&НаСервереБезКонтекста
Функция ПолучитьПредопределенныеЭлементы(Знач ВидМетаданных, ОбъектМетаданных)
	
	ИерархияГрупп = ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных)
			И ОбъектМетаданных.Иерархический 
			И ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
			
	СхемаЗапроса = Новый СхемаЗапроса;
	
	ЗапросПакета = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	Запрос = ЗапросПакета.Операторы[0];
	
	// Источники
	Запрос.Источники.Добавить(ОбъектМетаданных.ПолноеИмя(), "Таблица");
	
	ДобавитьКолонкуВСхемуЗапросаОбязательно(ЗапросПакета, Запрос, "Ссылка",);
	ДобавитьКолонкуВСхемуЗапросаОбязательно(ЗапросПакета, Запрос, "Имя", "ИмяПредопределенныхДанных"); 
	ДобавитьКод = Истина;
	Если ВидМетаданных = "ПланыСчетов" ИЛИ НЕ ЗначениеЗаполнено(ОбъектМетаданных.ДлинаКода) Тогда
		ДобавитьКод = Ложь;		
	КонецЕсли;
	
	ДобавитьКолонкуВСхемуЗапросаОбязательно(ЗапросПакета, Запрос, "Код", ,ДобавитьКод, "");
	
	ДобавитьКолонкуВСхемуЗапросаОбязательно(ЗапросПакета, Запрос, "ЭтоГруппа", , ИерархияГрупп, Ложь);

    // Условия	
	Запрос.Отбор.Добавить("Предопределенный");
	
	Если ИерархияГрупп Тогда			
		Запрос.Отбор.Добавить("НЕ ЭтоГруппа");		
	КонецЕсли;
	
	// Порядок
	ЗапросПакета.Порядок.Добавить("Имя");
	
	ЗапросПредопределенныхЭлементов = Новый Запрос;
	ЗапросПредопределенныхЭлементов.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат ЗапросПредопределенныхЭлементов.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьКолонкуВСхемуЗапросаОбязательно(ЗапросПакета, Запрос, Псевдоним, Поле = Неопределено, КакПоле = Истина, ЗначениеВыражения = Неопределено)
	
	Если КакПоле Тогда
		
		Если Поле = Неопределено Тогда
			Поле = Псевдоним;
		КонецЕсли;
		
		ИмяПоля = Поле;

		Запрос.ВыбираемыеПоля.Добавить(ИмяПоля);
		ЗапросПакета.Колонки.Найти(ИмяПоля).Псевдоним = Псевдоним;
		
	Иначе
		Выражение = Формат(ЗначениеВыражения, "ДФ=dd.MM.yyyy; БЛ=Ложь; БИ=Истина");
		
		Если Выражение = "" Тогда
			Выражение = """""";	
		КонецЕсли;
		
		Запрос.ВыбираемыеПоля.Добавить(Выражение);
		
		СтандартныйПсевдонимПоля = "Поле1";
		ЗапросПакета.Колонки.Найти(СтандартныйПсевдонимПоля).Псевдоним = Псевдоним;		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти