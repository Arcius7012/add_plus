#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Утверждения;
&НаКлиенте
Перем СтроковыеУтилиты;
&НаКлиенте
Перем ОтборПоПрефиксу;
&НаКлиенте
Перем ПрефиксОбъектов;
&НаКлиенте
Перем ВыводитьИсключения;
&НаКлиенте
Перем ПропускатьОбъектыСПрефиксомУдалить;
&НаКлиенте
Перем ИсключенияИзПроверок;
&НаКлиенте
Перем КаталогиВнешнихОтчетов;
&НаКлиенте
Перем ИмяФормыОтчета;
&НаКлиенте
Перем ИмяФормыНастроек;
&НаКлиенте
Перем ИмяФормыВарианта;

#КонецОбласти

#Область ИнтерфейсТестирования

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	СтроковыеУтилиты = КонтекстЯдра.Плагин("СтроковыеУтилиты");
	
	Настройки(КонтекстЯдра, ИмяТеста());
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт
	
	Инициализация(КонтекстЯдраПараметр);
	
	Если Не ВыполнятьТест(КонтекстЯдра) Тогда
		// add_plus
		НаборТестов.НачатьГруппу("Пропуск теста", Ложь);
		
		ПараметрыТеста = НаборТестов.ПараметрыТеста("Тест пропущен по настройке");
		НаборТестов.Добавить("ПропуститьТест", ПараметрыТеста, "Пропуск теста");
		// add_plus
		
		Возврат;
	КонецЕсли;
	
	ЕстьТесты = Ложь; // add_plus
	
	мОтчеты = Отчеты(ПрефиксОбъектов, ОтборПоПрефиксу);
	Если Не ВыводитьИсключения Тогда
		МассивТестов = УбратьИсключения(мОтчеты);
	Иначе
		МассивТестов = мОтчеты;
	КонецЕсли;
	Если МассивТестов.Количество() Тогда
		НаборТестов.НачатьГруппу("Отчеты", Истина);	
	КонецЕсли;
	Для Каждого Тест Из МассивТестов Цикл
		ИмяПроцедуры = "ТестДолжен_ПроверитьОсновныеФормыОтчетов";
		ИмяТеста = КонтекстЯдра.СтрШаблон_("%1 [%2]", Тест.ПолноеИмя, НСтр("ru = 'Проверка основных форм отчета'")); 
		НаборТестов.Добавить(ИмяПроцедуры, НаборТестов.ПараметрыТеста(Тест.Имя, Тест.ПолноеИмя), ИмяТеста);
		ЕстьТесты = Истина; // add_plus
	КонецЦикла;
	
	Для Каждого КаталогВнешнихОтчетов Из КаталогиВнешнихОтчетов Цикл
		ФайлыВнешнихОтчетов = НайтиФайлы(КаталогВнешнихОтчетов, "*.erf", Истина);
		Если ФайлыВнешнихОтчетов.Количество() Тогда
			ИмяГруппы = СтроковыеУтилиты.ПодставитьПараметрыВСтроку("Внешние отчеты [%1]", КаталогВнешнихОтчетов);
			Если Не ВыводитьИсключения Тогда
				МассивТестов = УбратьИсключения(ФайлыВнешнихОтчетов);
			Иначе
				МассивТестов = ФайлыВнешнихОтчетов;
			КонецЕсли;
			Если МассивТестов.Количество() Тогда
				НаборТестов.НачатьГруппу(ИмяГруппы, Истина);	
			КонецЕсли;
			Для Каждого Тест Из МассивТестов Цикл 
				ИмяПроцедуры = "ТестДолжен_ПроверитьОсновныеФормыВнешнихОтчетов";
				ИмяТеста = КонтекстЯдра.СтрШаблон_("%1 [%2]", Тест.ПолноеИмя, НСтр("ru = 'Проверка основных форм отчета'"));
				НаборТестов.Добавить(ИмяПроцедуры, НаборТестов.ПараметрыТеста(Тест.Имя, Тест.ПолноеИмя), ИмяТеста);
				ЕстьТесты = Истина; // add_plus
			КонецЦикла;			
		КонецЕсли;
	КонецЦикла;
	
	// add_plus
	Если Не ЕстьТесты Тогда
		НаборТестов.НачатьГруппу("Пропуск теста", Ложь);
		
		ПараметрыТеста = НаборТестов.ПараметрыТеста("Отсутствуют тестовые данные");
		НаборТестов.Добавить("ПропуститьТест", ПараметрыТеста, "Пропуск теста");	
	КонецЕсли; 
	// add_plus
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСНастройками

&НаКлиенте
Процедура Настройки(КонтекстЯдра, Знач ПутьНастройки)

	Если ЗначениеЗаполнено(Объект.Настройки) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормыОтчета = "";
	ИмяФормыНастроек = "";
	ИмяФормыВарианта = "";
	ОтборПоПрефиксу = Ложь;
	ПрефиксОбъектов = "";
	ВыводитьИсключения = Истина;
	ПропускатьОбъектыСПрефиксомУдалить = Ложь;
	КаталогиВнешнихОтчетов = Новый Массив;
	ИсключенияИзПроверок = Новый Соответствие;
	ПлагинНастроек = КонтекстЯдра.Плагин("Настройки");
	Объект.Настройки = ПлагинНастроек.ПолучитьНастройку(ПутьНастройки);
	Настройки = Объект.Настройки;
	
	Если Не ЗначениеЗаполнено(Объект.Настройки) Тогда
		Объект.Настройки = Новый Структура(ПутьНастройки, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Настройки.Свойство("ФормаОтчета") Тогда
		ИмяФормыОтчета = Настройки.ФормаОтчета;
	КонецЕсли;
	
	Если Настройки.Свойство("ФормаНастроек") Тогда
		ИмяФормыНастроек = Настройки.ФормаНастроек;
	КонецЕсли;
	
	Если Настройки.Свойство("ФормаВарианта") Тогда
		ИмяФормыВарианта = Настройки.ФормаВарианта;
	КонецЕсли;
	
	Если Настройки.Свойство("ВыводитьИсключения") Тогда
		ВыводитьИсключения = Настройки.ВыводитьИсключения;
	КонецЕсли;
	
	Если Настройки.Свойство("ПропускатьОбъектыСПрефиксомУдалить") Тогда
		ПропускатьОбъектыСПрефиксомУдалить = Настройки.ПропускатьОбъектыСПрефиксомУдалить;
	КонецЕсли;
	
	Если Настройки.Свойство("Префикс") Тогда
		ПрефиксОбъектов = ВРег(Настройки.Префикс);
	КонецЕсли;
	
	Если Настройки.Свойство("КаталогиВнешнихОтчетов") Тогда
		КаталогиВнешнихОтчетов = ОбработатьОтносительныеПути(Настройки.КаталогиВнешнихОтчетов, КонтекстЯдра);
	КонецЕсли;
	
	Если Настройки.Свойство("ОтборПоПрефиксу") Тогда
		ОтборПоПрефиксу = Настройки.ОтборПоПрефиксу;		
	КонецЕсли;
	
	Если Настройки.Свойство("ИсключенияИзПроверок") Тогда
		ИсключенияИзПроверок(Настройки);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ИсключенияИзПроверок(Настройки)

	Для Каждого ИсключенияИзПроверокПоОбъектам Из Настройки.ИсключенияИзпроверок Цикл
		Для Каждого ИсключениеИзПроверок Из ИсключенияИзПроверокПоОбъектам.Значение Цикл
			ИсключенияИзПроверок.Вставить(ВРег(ИсключенияИзПроверокПоОбъектам.Ключ + "." + ИсключениеИзПроверок), Истина); 	
		КонецЦикла;
	КонецЦикла;	

КонецПроцедуры

#КонецОбласти

#Область Тесты

&НаКлиенте
Процедура ТестДолжен_ПроверитьОсновныеФормыОтчетов(ИмяОтчета, ПолноеИмяОтчета) Экспорт
	
	ПропускатьТест = ПропускатьТест(ПолноеИмяОтчета);
	
	// add_plus
	Если ПропускатьТест.Пропустить Тогда
		Возврат;
	КонецЕсли;
	// add_plus
	
	Результат = ПроверитьОсновныеФормыОтчетов(ИмяОтчета, ИмяФормыОтчета, ИмяФормыНастроек, ИмяФормыВарианта);
	Утверждения.Проверить(Результат = "", ТекстСообщения(ИмяОтчета, Результат)); // add_plus
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьОсновныеФормыОтчетов(ИмяОтчета, ИмяФормыОтчета, ИмяФормыНастроек, ИмяФормыВарианта)
	
	Отчет = Метаданные.Отчеты.Найти(ИмяОтчета);	
	Результат = "";
	
	ПроверитьФормыОтчета(Результат, Отчет, ИмяФормыОтчета, ИмяФормыНастроек, ИмяФормыВарианта);
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ТестДолжен_ПроверитьОсновныеФормыВнешнихОтчетов(ИмяОтчета, ПолноеИмяОтчета) Экспорт
	
	// add_plus
	ПропускатьТест = ПропускатьТест(СтроковыеУтилиты.ПодставитьПараметрыВСтроку("ВнешнийОтчет.%1", СтрЗаменить(ИмяОтчета, ".erf", "")));
	
	Если ПропускатьТест.Пропустить Тогда
		Возврат;
	КонецЕсли; 
	// add_plus
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяОтчета);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтотОбъект.УникальныйИдентификатор);
	
	Результат = ПроверитьОсновныеФормыВнешнихОтчетов(Адрес, ИмяФормыОтчета, ИмяФормыНастроек, ИмяФормыВарианта);
	Если Результат.ТекстОшибки <> "" И ПропускатьТест.Пропустить Тогда
		Утверждения.ПропуститьТест(ТекстСообщения(ИмяОтчета, Результат.ТекстОшибки));
	ИначеЕсли Не Результат.ОтчетПодключен Тогда
		Утверждения.Проверить(Результат.ОтчетПодключен, Результат.ТекстОшибки);
	Иначе
		Утверждения.Проверить(Результат.ТекстОшибки = "", ТекстСообщения(ИмяОтчета, Результат.ТекстОшибки));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьОсновныеФормыВнешнихОтчетов(Адрес, ИмяФормыОтчета, ИмяФормыНастроек, ИмяФормыВарианта)
	
	// add_plus
	Ответ = Новый Структура;
	Ответ.Вставить("ТекстОшибки", "");
	Ответ.Вставить("ОтчетПодключен", Ложь);
	// add_plus
	
	Попытка
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
		ИмяФайлаОтчета = ПолучитьИмяВременногоФайла("erf");
		ДвоичныеДанные.Записать(ИмяФайлаОтчета);
		// add_plus
		ВнешнийОтчет = ВнешниеОтчеты.Создать(ИмяФайлаОтчета).Метаданные();
		Ответ.ОтчетПодключен = Истина; 
		// add_plus
		УдалитьФайлы(ИмяФайлаОтчета);
	Исключение
		УдалитьФайлы(ИмяФайлаОтчета);
		// add_plus
		Ответ.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ответ;
		// add_plus
	КонецПопытки;
	
	// add_plus Не правильно было написано
	Результат = "";
	ПроверитьФормыОтчета(Результат, ВнешнийОтчет, ИмяФормыОтчета, ИмяФормыНастроек, ИмяФормыВарианта);
		
	Ответ.ТекстОшибки = Результат;
	
	Возврат Ответ;
    // add_plus
КонецФункции

&НаСервереБезКонтекста
Процедура ПроверитьФормыОтчета(Результат, Отчет, ИмяФормыОтчета, ИмяФормыНастроек, ИмяФормыВарианта)

	СтроковыеУтилиты = СтроковыеУтилиты();	
	
	// add_plus Не правильно было написано
	Если ЗначениеЗаполнено(ИмяФормыОтчета) Тогда
		ФормаОтчета = Метаданные.ОбщиеФормы.Найти(ИмяФормыОтчета);
		Если Отчет.ОсновнаяФорма <> Неопределено 
			И Отчет.ОсновнаяФорма <> ФормаОтчета Тогда
			Разделитель = ?(ЗначениеЗаполнено(Результат), ",", "");
			ШаблонОшибки = НСтр("ru = '%1%2 некорректная форма отчета'");
			Результат = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(ШаблонОшибки, Результат, Разделитель);	
		КонецЕсли;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ИмяФормыНастроек) Тогда
		ФормаНастроек = Метаданные.ОбщиеФормы.Найти(ИмяФормыНастроек);
		Если Отчет.ОсновнаяФормаНастроек <> Неопределено 
			И Отчет.ОсновнаяФормаНастроек <> ФормаНастроек Тогда
			Разделитель = ?(ЗначениеЗаполнено(Результат), ",", "");
			ШаблонОшибки = НСтр("ru = '%1%2 некорректная форма настроек отчета'");
			Результат = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(ШаблонОшибки, Результат, Разделитель);	
		КонецЕсли;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ИмяФормыВарианта) Тогда
		ФормаВарианта = Метаданные.ОбщиеФормы.Найти(ИмяФормыВарианта);
		Если Отчет.ОсновнаяФормаВарианта <> Неопределено
			И Отчет.ОсновнаяФормаВарианта <> ФормаВарианта Тогда
			Разделитель = ?(ЗначениеЗаполнено(Результат), ",", "");
			ШаблонОшибки = НСтр("ru = '%1%2 некорректная форма варианта отчета'");
			Результат = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(ШаблонОшибки, Результат, Разделитель);	
		КонецЕсли;
	КонецЕсли;
	// add_plus
	
КонецПроцедуры

// add_plus
&НаКлиенте
Процедура ПропуститьТест(Знач ПричинаПропускаТеста) Экспорт
	КонтекстЯдра.ПропуститьТест(ПричинаПропускаТеста);
КонецПроцедуры // add_plus

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПропускатьТест(ИмяОтчета)

	Результат = Новый Структура;
	Результат.Вставить("ТекстСообщения", "");
	Результат.Вставить("Пропустить", Ложь);
	
	Если ИсключенИзПроверок(ВРег(ИмяОтчета)) Тогда
		ШаблонСообщения = НСтр("ru = 'Объект ""%1"" исключен из проверки.'");
		Результат.ТекстСообщения = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяОтчета);
		Результат.Пропустить = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Если ПропускатьОбъектыСПрефиксомУдалить = Истина И СтрНайти(ВРег(ИмяОтчета), ".УДАЛИТЬ") > 0 Тогда
		ШаблонСообшения = НСтр("ru = 'Объект ""%1"" исключен из проверки, префикс ""Удалить""'");
		Результат.ТекстСообщения = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(ШаблонСообшения, ИмяОтчета);
		Результат.Пропустить = Истина;
		Возврат Результат;
	КонецЕсли;
		
	Возврат Результат;

КонецФункции 

&НаКлиенте
Функция ТекстСообщения(ИмяОтчета, Результат)
	
	// add_plus Изменено сообщение
	ШаблонСообщения = НСтр("ru = 'Для отчета ""%1"" некорректно указаны формы:%2.'");
	ТекстСообщения = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяОтчета, Результат);
	// add_plus
	
	Возврат ТекстСообщения;

КонецФункции

&НаКлиенте
Функция УбратьИсключения(МассивТестов)

	Результат = Новый Массив;
	
	Для Каждого Тест Из МассивТестов Цикл
		Если Не ИсключенИзПроверок(Тест.ПолноеИмя) Тогда
			Результат.Добавить(Тест);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ИсключенИзПроверок(Знач ПолноеИмяМетаданных) // add_plus
	
	Результат = Ложь;
	МассивСтрокИмени = СтроковыеУтилиты.РазложитьСтрокуВМассивПодстрок(ПолноеИмяМетаданных, ".");
	ИслючениеВсехОбъектов = СтроковыеУтилиты.ПодставитьПараметрыВСтроку("%1.*", МассивСтрокИмени[0]);
	
	Если ИсключенияИзПроверок.Получить(ВРег(ПолноеИмяМетаданных)) <> Неопределено
	 Или ИсключенияИзПроверок.Получить(ВРег(ИслючениеВсехОбъектов)) <> Неопределено Тогда
		Результат = Истина;	
	КонецЕсли;
	
	// add_plus Архив тоже исключаем
	Если СтрНайти(ПолноеИмяМетаданных, "\Архив\") <> 0
		Или СтрНайти(ПолноеИмяМетаданных, "\Служебные\") <> 0 Тогда
		Результат = Истина;	
	КонецЕсли; 
	// add_plus
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОбработатьОтносительныеПути(Знач ОтносительныеПути, КонтекстЯдра)

	Результат = Новый Массив;
	
	Для Каждого ОтносительныйПуть Из ОтносительныеПути Цикл
		
		Если Лев(ОтносительныйПуть, 1) = "." И ЗначениеЗаполнено(КонтекстЯдра.Объект.КаталогПроекта) Тогда
			ОтносительныйПуть = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(
									"%1%2", 
									КонтекстЯдра.Объект.КаталогПроекта, 
									Сред(ОтносительныйПуть, 2));
		КонецЕсли;
		
		ОтносительныйПуть = СтрЗаменить(ОтносительныйПуть, "\\", "\");
		
		Если Результат.Найти(ОтносительныйПуть) = Неопределено Тогда
			Результат.Добавить(ОтносительныйПуть);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции 

&НаСервереБезКонтекста
Функция СтроковыеУтилиты()
	Возврат ВнешниеОбработки.Создать("СтроковыеУтилиты");	
КонецФункции 

&НаКлиенте
Функция ИмяТеста()
	
	Если Не ЗначениеЗаполнено(Объект.ИмяТеста) Тогда
		Объект.ИмяТеста = ИмяТестаНаСервере();
	КонецЕсли;
	
	Возврат Объект.ИмяТеста;
	
КонецФункции

&НаСервере
Функция ИмяТестаНаСервере()
	Возврат РеквизитФормыВЗначение("Объект").Метаданные().Имя;
КонецФункции

&НаКлиенте
Функция ВыполнятьТест(КонтекстЯдра)
	
	ВыполнятьТест = Ложь;
	Настройки(КонтекстЯдра, ИмяТеста());
	Настройки = Объект.Настройки;
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Возврат ВыполнятьТест;
	КонецЕсли;
		
	Если ТипЗнч(Настройки) = Тип("Структура") И Настройки.Свойство("Используется") Тогда
		ВыполнятьТест = Настройки.Используется;	
	КонецЕсли;
	
	Возврат ВыполнятьТест;

КонецФункции

&НаСервереБезКонтекста
Функция Отчеты(ПрефиксОбъектов, ОтборПоПрефиксу)

	Результат = Новый Массив;
	
	Для Каждого Отчет Из Метаданные.Отчеты Цикл
		Если ОтборПоПрефиксу И Не ИмяСодержитПрефикс(Отчет.Имя, ПрефиксОбъектов) Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОтчета = Новый Структура;
		СтруктураОтчета.Вставить("Имя", Отчет.Имя);
		СтруктураОтчета.Вставить("Синоним", Отчет.Синоним);
		СтруктураОтчета.Вставить("ПолноеИмя", Отчет.ПолноеИмя());
		Результат.Добавить(СтруктураОтчета);
	КонецЦикла;	
	
	Возврат Результат;

КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяСодержитПрефикс(Имя, Префикс)
	
	Если Не ЗначениеЗаполнено(Префикс) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// add_plus
	Возврат СтрНачинаетсяС(ВРег(Имя), ВРег(Префикс));
	// add_plus
	
КонецФункции

#КонецОбласти