#Область ОписаниеПеременных

Перем КонтекстЯдра;
Перем Утверждения;
Перем УтвержденияПроверкаТаблиц;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ИнтерфейсТестирования

Функция КлючНастройки()
	Если Не ЗначениеЗаполнено(ИмяТеста) Тогда
		ИмяТеста = Метаданные().Имя;
	КонецЕсли;
	
	Возврат ИмяТеста;
КонецФункции

Процедура Инициализация(КонтекстЯдраПараметр, НастройкиВходящие = Неопределено) Экспорт // add_plus
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	
	ЗагрузитьНастройки(НастройкиВходящие); // add_plus
	
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр, НастройкиВходящие = Неопределено) Экспорт // add_plus
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	ЗапросыИзБД = КонтекстЯдра.Плагин("ЗапросыИзБД");
	ЗапросыИзБД.Инициализация(КонтекстЯдра);
	
	
	ЗагрузитьНастройки(НастройкиВходящие); // add_plus
	
	Если Не НужноВыполнятьТест() Тогда
		// add_plus
		НаборТестов.НачатьГруппу("Пропуск теста", Ложь);
		
		ПараметрыТеста = НаборТестов.ПараметрыТеста("Тест пропущен по настройке");
		НаборТестов.Добавить("ПропуститьТест", ПараметрыТеста, "Пропуск теста");
		// add_plus
		
		Возврат;
	КонецЕсли;
	
	ЕстьТесты = Ложь;
	
	Для Каждого МетаОбъект Из Метаданные.Справочники Цикл
		// add_plus
		Если СтрНачинаетсяС(НРег(МетаОбъект.Имя), "удалить") Тогда
			Продолжить;
		КонецЕсли;
				
		//МожноМенять = ЗапросыИзБД.РазрешеноИзменятьОбъектВМоделиСервиса(МетаОбъект);
		Иерархический = МетаОбъект.Иерархический И МетаОбъект.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
		
		//Если МожноМенять И Иерархический И ПравоДоступа("Изменение", МетаОбъект)
		//	И (Не Настройки.ОтборПоПрефиксу ИЛИ СтрНачинаетсяС(ВРег(МетаОбъект.Имя), ВРег(Настройки.Префикс))) Тогда
			
		Если Иерархический И ПравоДоступа("Изменение", МетаОбъект)
			И (Не Настройки.ОтборПоПрефиксу ИЛИ СтрНачинаетсяС(ВРег(МетаОбъект.Имя), ВРег(Настройки.Префикс))) Тогда
			
			ДобавитьТестыДляСправочника(НаборТестов, МетаОбъект, ЕстьТесты); // add_plus
		КонецЕсли;
		// add_plus
	КонецЦикла;
	
	// add_plus
	Если Не ЕстьТесты Тогда
		НаборТестов.НачатьГруппу("Пропуск теста", Ложь);
		
		ПараметрыТеста = НаборТестов.ПараметрыТеста("Отсутствуют тестовые данные");
		НаборТестов.Добавить("ПропуститьТест", ПараметрыТеста, "Пропуск теста");
	КонецЕсли; // add_plus
	
КонецПроцедуры

Функция КлючНастройкиУстаревший()
	Возврат "ЗаписьГруппСправочников";
КонецФункции

#КонецОбласти

#Область Тесты

Процедура ПередЗапускомТеста() Экспорт
	
	НачатьТранзакцию();
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура Тест_ЗаписатьГруппуСправочника(СправочникСсылка) Экспорт
	
	ГруппаОбъект = СправочникСсылка.ПолучитьОбъект();
	ГруппаОбъект.Записать();
	
КонецПроцедуры

Процедура Тест_ПропуститьЗаписьГруппыСправочника(Знач Сообщение) Экспорт
	// add_plus
	//КонтекстЯдра.ПропуститьТест(Сообщение);
	// add_plus
КонецПроцедуры

// add_plus
Процедура ПропуститьТест(Знач ПричинаПропускаТеста) Экспорт
	КонтекстЯдра.ПропуститьТест(ПричинаПропускаТеста);
КонецПроцедуры // add_plus

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Настройки

Процедура ЗагрузитьНастройки(НастройкиВходящие) // add_plus
	
	Если ЗначениеЗаполнено(Настройки) Тогда
		Возврат;
	КонецЕсли;

    Настройки = НастройкиВходящие; // add_plus
	
	НастройкиПоУмолчанию = НастройкиПоУмолчанию();
    Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
        Настройки = НастройкиПоУмолчанию;
	Иначе
		ЗаполнитьЗначенияСвойств(НастройкиПоУмолчанию, Настройки);
        Настройки = НастройкиПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры

Функция НастройкиПоУмолчанию()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Используется", Истина);
	Результат.Вставить("КоличествоПервыхГрупп", 2);
	Результат.Вставить("КоличествоПоследнихГрупп", 2);
	Результат.Вставить("ВыводитьИсключения", Ложь);
	Результат.Вставить("Исключения", Новый Массив);
	Результат.Вставить("Префикс", "");
	Результат.Вставить("ОтборПоПрефиксу", Ложь);
	
	Возврат Результат;
КонецФункции

Функция НужноВыполнятьТест()
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВыполнятьТест = Истина;
	Если ТипЗнч(Настройки) = Тип("Структура") 
		И Настройки.Свойство("Используется", ВыполнятьТест) Тогда
		Возврат ВыполнятьТест = Истина;	
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

#КонецОбласти

Процедура ДобавитьТестыДляСправочника(НаборТестов, МетаОбъект, ЕстьТесты) // add_plus

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ &КоличествоПервыхГрупп
	|	Ссылка
	|ПОМЕСТИТЬ вт_Первые
	|ИЗ
	|	Справочник." + МетаОбъект.Имя + "
	|ГДЕ
	|	ЭтоГруппа
	// add_plus
	|		И НЕ ПометкаУдаления
	|		И ИмяПредопределенныхДанных = """"
	// add_plus
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ &КоличествоПоследнихГрупп
	|	Ссылка
	|ПОМЕСТИТЬ вт_Последние
	|ИЗ
	|	Справочник." + МетаОбъект.Имя + "
	|ГДЕ
	|	ЭтоГруппа
	// add_plus
	|		И НЕ ПометкаУдаления
	|		И ИмяПредопределенныхДанных = """"
	// add_plus
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Первые.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ вт_Все
	|ИЗ
	|	вт_Первые КАК вт_Первые
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	вт_Последние.Ссылка
	|ИЗ
	|	вт_Последние КАК вт_Последние;
	|
	|ВЫБРАТЬ
	|	вт_Все.Ссылка,
	|   ПРЕДСТАВЛЕНИЕ(вт_Все.Ссылка) КАК Представление
	|ИЗ
	|	вт_Все КАК вт_Все";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
								"ВЫБРАТЬ ПЕРВЫЕ &КоличествоПервыхГрупп", 
								"ВЫБРАТЬ ПЕРВЫЕ " + Формат(Настройки.КоличествоПервыхГрупп, "ЧГ=")
								);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
								"ВЫБРАТЬ ПЕРВЫЕ &КоличествоПоследнихГрупп", 
								"ВЫБРАТЬ ПЕРВЫЕ " + Формат(Настройки.КоличествоПоследнихГрупп, "ЧГ=")
								);	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;	
	КонецЕсли; 
	
	ПредставлениеТеста = "Проверка записи группы справочника - " + МетаОбъект.Имя;
	Сообщение = "Пропускаем из-за исключения по имени справочника - " + ПредставлениеТеста;
	ЭтоИсключение = Ложь;  
	
	Если КонтекстЯдра.ЕстьВИсключаемойКоллекции(МетаОбъект.Имя, Настройки.Исключения) Тогда
		КонтекстЯдра.Отладка(Сообщение); 
		
		Если Не Настройки.ВыводитьИсключения Тогда
		    Возврат;
		КонецЕсли;	
		
		ЭтоИсключение = Истина;
	КонецЕсли;  
	
	НаборТестов.НачатьГруппу(МетаОбъект.Синоним + " - Справочник."  + МетаОбъект.Имя);
		
	Если ЭтоИсключение Тогда
		ПараметрыТеста = НаборТестов.ПараметрыТеста(Сообщение);
		НаборТестов.Добавить("Тест_ПропуститьЗаписьГруппыСправочника", ПараметрыТеста, Сообщение);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПараметрыТеста = НаборТестов.ПараметрыТеста(Выборка.Ссылка);
			ПредставлениеТеста = "Проверка записи группы справочника - " + Выборка.Представление;
			
			НаборТестов.Добавить("Тест_ЗаписатьГруппуСправочника", ПараметрыТеста, ПредставлениеТеста);	
			
			ЕстьТесты = Истина; // add_plus
		КонецЦикла; 
	КонецЕсли;	
		
КонецПроцедуры

Функция ИмяТеста()
	
	Возврат Метаданные().Имя;
	
КонецФункции

#КонецОбласти