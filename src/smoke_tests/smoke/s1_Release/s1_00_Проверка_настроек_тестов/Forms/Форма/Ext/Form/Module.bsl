#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстЯдра, Утверждения, СтроковыеУтилиты;
&НаКлиенте
Перем ИмяКонфигурации, ВерсияКонфигурации;
&НаКлиенте
Перем ИмяКонфигурацииПоставщика, ВерсияКонфигурацииПоставщика;
&НаКлиенте
Перем ИмяКонфигурацииПредопределенных, ВерсияКонфигурацииПредопределенных;

#КонецОбласти

#Область ИнтерфейсТестирования

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра 		= КонтекстЯдраПараметр;
	Утверждения 		= КонтекстЯдра.Плагин("БазовыеУтверждения");
	СтроковыеУтилиты 	= КонтекстЯдра.Плагин("СтроковыеУтилиты");
	
	Настройки(КонтекстЯдра, "Информация");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт
	
	Инициализация(КонтекстЯдраПараметр);
	
	НаборТестов.НачатьГруппу("Проверка настроек проекта", Истина);
	
	ПараметрыТеста = НаборТестов.ПараметрыТеста(ИмяКонфигурации, ВерсияКонфигурации, "настройки");	
	НаборТестов.Добавить("ПроверкаНастроек", ПараметрыТеста, "Проверка настроек");
	
	Если ИмяКонфигурацииПоставщика <> "" Тогда
		ПараметрыТеста = НаборТестов.ПараметрыТеста(ИмяКонфигурацииПоставщика, ВерсияКонфигурацииПоставщика, "настройки конфигурации поставщика");
		НаборТестов.Добавить("ПроверкаНастроек", ПараметрыТеста, "Проверка настроек конфигурации поставщика"); 
	КонецЕсли;
	
	Если ИмяКонфигурацииПредопределенных <> "" Тогда
		ПараметрыТеста = НаборТестов.ПараметрыТеста(ИмяКонфигурацииПредопределенных, ВерсияКонфигурацииПредопределенных, "настройки предопределенных элементов поставщика");
		НаборТестов.Добавить("ПроверкаНастроек", ПараметрыТеста, "Проверка настроек предопределенных элементов поставщика"); 
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#Область РаботаСНастройками

&НаКлиенте
Процедура Настройки(КонтекстЯдра, Знач ПутьНастройки)

	Если ЗначениеЗаполнено(Объект.Настройки) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКонфигурации = "";
	ВерсияКонфигурации = "";  
	
	ИмяКонфигурацииПоставщика = "";
	ВерсияКонфигурацииПоставщика = ""; 
	
	ИмяКонфигурацииПредопределенных = ""; 
	ВерсияКонфигурацииПредопределенных = "";
			
	ПлагинНастроек 		= КонтекстЯдра.Плагин("Настройки");
	Объект.Настройки 	= ПлагинНастроек.ПолучитьНастройку(ПутьНастройки);
	Настройки 			= Объект.Настройки;
	
	НастройкаПредопределенных = ПлагинНастроек.ПолучитьНастройку("s3_02_Проверка_префикса_в_предопределенных_элементах");
	НастройкаПоставщика = ПлагинНастроек.ПолучитьНастройку("s3_03_Проверка_префикса_в_новых_объектах_и_реквизитах");
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Объект.Настройки = Новый Структура(ПутьНастройки, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Настройки.Свойство("ИмяКонфигурации") Тогда
		ИмяКонфигурации = Настройки.ИмяКонфигурации;
	КонецЕсли; 
	
	Если Настройки.Свойство("Редакция") Тогда
		ВерсияКонфигурации = Настройки.Редакция;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(НастройкаПредопределенных) Тогда
		КонфигурацияПоставщика = ПрочитатьФайлКонфигурацииПоставщика(КонтекстЯдра, НастройкаПредопределенных);
		
		Если КонфигурацияПоставщика <> Неопределено Тогда
			Для Каждого КонфигурацияПоставщика Из КонфигурацияПоставщика Цикл
				
				Если КонфигурацияПоставщика.Значение.Свойство("ИмяКонфигурации") Тогда
					ИмяКонфигурацииПредопределенных = КонфигурацияПоставщика.Значение.ИмяКонфигурации;	
				КонецЕсли;
				
				Если КонфигурацияПоставщика.Значение.Свойство("Редакция") Тогда
					ВерсияКонфигурацииПредопределенных = КонфигурацияПоставщика.Значение.Редакция;	
				КонецЕсли; 
				
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкаПоставщика) Тогда
		КонфигурацияПоставщика = ПрочитатьФайлКонфигурацииПоставщика(КонтекстЯдра, НастройкаПоставщика);
		
		Если КонфигурацияПоставщика <> Неопределено Тогда
			Для Каждого КонфигурацияПоставщика Из КонфигурацияПоставщика Цикл
				
				Если КонфигурацияПоставщика.Значение.Свойство("ИмяКонфигурации") Тогда
					ИмяКонфигурацииПоставщика = КонфигурацияПоставщика.Значение.ИмяКонфигурации;	
				КонецЕсли;
				
				Если КонфигурацияПоставщика.Значение.Свойство("Редакция") Тогда
					ВерсияКонфигурацииПоставщика = КонфигурацияПоставщика.Значение.Редакция;	
				КонецЕсли; 
				
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Тесты

&НаКлиенте
Процедура ПроверкаНастроек(ПроверяемоеИмя, ПроверяемаяВерсия, ИмяНастройки) Экспорт
	
	Результат = ПроверитьНастройки(ПроверяемоеИмя, ПроверяемаяВерсия, ИмяНастройки);
	
	Если Результат <> "" Тогда
		ВызватьИсключение(Результат);	
	Иначе
		Утверждения.Проверить(Истина, "");
	КонецЕсли;
		
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПроверитьНастройки(ПроверяемоеИмя, ПроверяемаяВерсия, ИмяНастройки)
	
	Результат = "";
	
	Если ПроверяемоеИмя = "" Тогда
		Результат = СтрШаблон("Не удалось определить имя %1 из настройки дымовых тестов. Проверьте свойство ""ИмяКонфигурации""", ИмяНастройки);
	ИначеЕсли Метаданные.Имя <> ПроверяемоеИмя Тогда
		Результат = СтрШаблон("Не совпало имя %1 и базы тестирования. Ожидали %2, настройки для %3", ИмяНастройки, Метаданные.Имя, ПроверяемоеИмя);
	КонецЕсли;
	
	Если ПроверяемаяВерсия = "" Тогда
		Результат = Результат + ?(Результат = "", "", Символы.ПС) + СтрШаблон("Не удалось определить версию %1 из настройки дымовых тестов. Проверьте свойство ""Редакция""", ИмяНастройки);
	ИначеЕсли Метаданные.Версия <> ПроверяемаяВерсия Тогда
		Результат = Результат + ?(Результат = "", "", Символы.ПС) + СтрШаблон("Не совпало версия %1 и базы тестирования. Ожидали %2, настройки для %3", ИмяНастройки, Метаданные.Версия, ПроверяемаяВерсия);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПропуститьТест(Знач ПричинаПропускаТеста) Экспорт
	КонтекстЯдра.ПропуститьТест(ПричинаПропускаТеста);
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ИмяТеста()
	
	Если Не ЗначениеЗаполнено(Объект.ИмяТеста) Тогда
		Объект.ИмяТеста = ИмяТестаНаСервере();
	КонецЕсли;
	
	Возврат Объект.ИмяТеста;
	
КонецФункции

&НаСервере
Функция ИмяТестаНаСервере()
	Возврат РеквизитФормыВЗначение("Объект").Метаданные().Имя;
КонецФункции

&НаКлиенте
Функция ВыполнятьТест(КонтекстЯдра)
	
	ВыполнятьТест = Ложь;
	Настройки(КонтекстЯдра, ИмяТеста());
	Настройки = Объект.Настройки;
	
	Если Не ЗначениеЗаполнено(Настройки) Тогда
		Возврат ВыполнятьТест;
	КонецЕсли;
		
	Если ТипЗнч(Настройки) = Тип("Структура") 
		И Настройки.Свойство("Используется") Тогда
		
		ВыполнятьТест = Настройки.Используется;	
	КонецЕсли;
	
	Возврат ВыполнятьТест;

КонецФункции

&НаКлиенте
Функция ПрочитатьФайлКонфигурацииПоставщика(мКонтекстЯдра, Настройки)
	
	#Если Не ВебКлиент Тогда
	ПутьФайлаКонфигурацииПоставщика = Настройки.КонфигурацияПоставщика;
	ПутьФайлаКонфигурацииПоставщика = ОбработатьОтносительныйПуть(ПутьФайлаКонфигурацииПоставщика, мКонтекстЯдра);
		
	Файл = Новый Файл(ПутьФайлаКонфигурацииПоставщика);
	Если Не Файл.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеJson = Новый ЧтениеJSON;
	ЧтениеJson.ОткрытьФайл(ПутьФайлаКонфигурацииПоставщика);	
	КонфигурацииПоставщика = ПрочитатьJSON(ЧтениеJson);
	ЧтениеJson.Закрыть();
		
	Файл = Неопределено; 
	
	Возврат КонфигурацииПоставщика;
	#Иначе
	Возврат Неопределено;
	#КонецЕсли

КонецФункции

&НаКлиенте
Функция ОбработатьОтносительныйПуть(Знач ОтносительныйПуть, КонтекстЯдра)

	Если Лев(ОтносительныйПуть, 1) = "." И ЗначениеЗаполнено(КонтекстЯдра.Объект.КаталогПроекта) Тогда
		ОтносительныйПуть = СтроковыеУтилиты.ПодставитьПараметрыВСтроку(
								"%1%2", 
								КонтекстЯдра.Объект.КаталогПроекта, 
								Сред(ОтносительныйПуть, 2));
	КонецЕсли;
	
	Результат = СтрЗаменить(ОтносительныйПуть, "\\", "\");
		
	Возврат Результат;

КонецФункции

#КонецОбласти